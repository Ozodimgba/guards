import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, getAssociatedTokenAddressSync, } from "@solana/spl-token";
import { SYSVAR_RENT_PUBKEY, SystemProgram } from "@solana/web3.js";
import { BN } from "@project-serum/anchor";
import { findBLDataMetadataAddress, findMetadataAddress, getBlSignerPDA, } from "../../utils/pda";
import { getBuddylinkBuddyAccounts } from "../../utils/accounts";
import { parsePublicKey } from "../../utils/parse";
export function claimNFTOrganization(program, authority, organizationPDA, organizationName, options, nftMint) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, buddyPDA, ata, treasury, memberPDA;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getBuddylinkBuddyAccounts(program, organizationName, options.mainTokenMint)];
                case 1:
                    _a = _b.sent(), buddyPDA = _a.buddyPDA, ata = _a.ata, treasury = _a.treasury, memberPDA = _a.memberPDA;
                    return [4 /*yield*/, program.methods
                            .claimOrganization(options.mainTokenMint, options.enforceWalletUniqueness, options.allowMultiLevel, null, options.allowMultiAttribution, new BN(options.volumeRequiredForRewards))
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: SystemProgram.programId,
                            rent: SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            blNftSigner: getBlSignerPDA(program),
                            organization: organizationPDA,
                            mint: parsePublicKey(options.mainTokenMint),
                            buddylinkBuddy: buddyPDA,
                            buddylinkBuddyTreasury: treasury,
                            buddylinkBuddyTokenAccount: ata,
                            buddylinkBuddyMember: memberPDA,
                            metaplexMetadataAccount: findMetadataAddress(nftMint),
                            ambassador: null,
                            nftMint: nftMint,
                            nftToken: getAssociatedTokenAddressSync(nftMint, authority),
                            nftMetadata: findBLDataMetadataAddress(nftMint, program.programId)
                        })
                            .instruction()];
                case 2: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
//# sourceMappingURL=claimNFTOrganization.js.map