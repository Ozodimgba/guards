import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, getAssociatedTokenAddressSync, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { findBLDataMetadataAddress, findMasterEdition, findMetadataAddress, getBlSignerPDA, increaseComputeLimit, } from "../../utils/pda";
import { COLLECTION_MINT, METADATA_PROGRAM_ID } from "../../utils/type";
export function mintPaidBuddy(program, authority, buddyProfilePDA, paidBuddyPDA, generatedMintAddress, collectionMint) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = [increaseComputeLimit(250000)];
                    return [4 /*yield*/, program.methods
                            .mintPaidBuddy()
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            buddyProfile: buddyProfilePDA,
                            buddy: paidBuddyPDA,
                            blNftSigner: getBlSignerPDA(program),
                            metaplexTokenMetadataProgram: METADATA_PROGRAM_ID,
                            metaplexMetadataAccount: findMetadataAddress(generatedMintAddress),
                            nftMint: generatedMintAddress,
                            nftToken: getAssociatedTokenAddressSync(generatedMintAddress, authority),
                            nftMetadata: findBLDataMetadataAddress(generatedMintAddress, program.programId),
                            collectionMint: collectionMint || COLLECTION_MINT,
                            collectionMetadata: findMetadataAddress(collectionMint || COLLECTION_MINT),
                            collectionMasterEdition: findMasterEdition(collectionMint || COLLECTION_MINT)
                        })
                            .instruction()];
                case 1: return [2 /*return*/, _a.concat([
                        _b.sent()
                    ])];
            }
        });
    });
}
//# sourceMappingURL=mintPaidBuddy.js.map