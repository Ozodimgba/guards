import { __awaiter, __generator } from "tslib";
import { TOKEN_PROGRAM_ID, getAssociatedTokenAddressSync, } from "@solana/spl-token";
import { SYSVAR_RENT_PUBKEY, SystemProgram } from "@solana/web3.js";
import { findBLDataMetadataAddress, findMetadataAddress, getBlSignerPDA, } from "../../utils/pda";
export function redeemPaidBuddy(program, authority, buddyProfilePDA, paidBuddyPDA, nftMint) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, program.methods
                        .burnPaidBuddy()
                        .accounts({
                        tokenProgram: TOKEN_PROGRAM_ID,
                        systemProgram: SystemProgram.programId,
                        rent: SYSVAR_RENT_PUBKEY,
                        authority: authority,
                        blNftSigner: getBlSignerPDA(program),
                        buddyProfile: buddyProfilePDA,
                        buddy: paidBuddyPDA,
                        metaplexMetadataAccount: findMetadataAddress(nftMint),
                        nftMint: nftMint,
                        nftToken: getAssociatedTokenAddressSync(nftMint, authority),
                        nftMetadata: findBLDataMetadataAddress(nftMint, program.programId)
                    })
                        .instruction()];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
//# sourceMappingURL=redeemPaidBuddy.js.map