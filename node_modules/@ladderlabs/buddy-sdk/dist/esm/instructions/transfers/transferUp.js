import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getTokenAccount } from "../../utils/pda";
import { getMasterTreasuryPDA } from "../../utils/pda";
import { BUDDY_DOESNT_EXIST, TREASURY_DOESNT_EXIST, TREASURY_OWNER_MISMATCH, } from "../../utils/type";
import { parsePublicKey } from "../../utils/parse";
export function transferUp(program, authority, buddyPDA, treasuryPDA) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var treasury, masterOrg, masterTreasuryPDA, masterTreasuryATA, buddy, profilePDA, profile, buddyTreasuryATA, referrerTreasuryATA;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
                case 1:
                    treasury = _b.sent();
                    if (!treasury)
                        throw TREASURY_DOESNT_EXIST;
                    if (!treasury.owners.find(function (owner) { return owner.ownerPda.toString() === buddyPDA.toString(); }))
                        throw TREASURY_OWNER_MISMATCH;
                    return [4 /*yield*/, program.account.masterOrganization.all()];
                case 2:
                    masterOrg = (_b.sent())[0];
                    masterTreasuryPDA = getMasterTreasuryPDA(program, treasury.mint);
                    return [4 /*yield*/, getTokenAccount(masterTreasuryPDA, treasury.mint)];
                case 3:
                    masterTreasuryATA = _b.sent();
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 4:
                    buddy = _b.sent();
                    if (!buddy)
                        throw BUDDY_DOESNT_EXIST;
                    profilePDA = buddyPDA;
                    if (!!((_a = buddy.buddyType) === null || _a === void 0 ? void 0 : _a.profile)) return [3 /*break*/, 6];
                    return [4 /*yield*/, program.account.buddy.all([
                            { memcmp: { offset: 8, bytes: buddy.authority.toBase58() } },
                        ])];
                case 5:
                    profile = (_b.sent())[0];
                    profilePDA = profile.publicKey;
                    _b.label = 6;
                case 6: return [4 /*yield*/, getTokenAccount(treasuryPDA, treasury.mint)];
                case 7:
                    buddyTreasuryATA = _b.sent();
                    return [4 /*yield*/, getTokenAccount(buddy.referrerTreasuryPda, treasury.mint)];
                case 8:
                    referrerTreasuryATA = _b.sent();
                    return [2 /*return*/, program.methods
                            .transferUp()
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrg.publicKey,
                            masterOrganizationTreasury: masterTreasuryPDA,
                            masterOrganizationTokenAccount: masterTreasuryATA,
                            buddyProfile: profilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: treasuryPDA,
                            buddyTokenAccount: buddyTreasuryATA,
                            mint: parsePublicKey(treasury.mint),
                            referrerTreasury: buddy.referrerTreasuryPda,
                            referrerTokenAccount: referrerTreasuryATA
                        })
                            .instruction()];
            }
        });
    });
}
//# sourceMappingURL=transferUp.js.map