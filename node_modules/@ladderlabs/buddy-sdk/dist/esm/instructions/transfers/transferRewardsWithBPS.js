import { __assign, __awaiter, __generator } from "tslib";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getTokenAccount, getTreasuryPDAByHash } from "../../utils/pda";
import { getTreasuryPDA } from "../../utils/pda";
import { initTreasury } from "../init/initTreasury";
import { parsePublicKey } from "../../utils/parse";
import { MEMBER_NOT_EXIST, REFERRER_TREASURY_DOESNT_EXIST, } from "../../utils/type";
export function transferRewardsWithBPS(program, authority, memberPDA, amount, //With lamport decimals
allowMultiLevel, mint, allowStats) {
    return __awaiter(this, void 0, void 0, function () {
        var instructions, member, referrerTreasuryPDA, referrerTreasury, mintTreasuryPDA, owners, shares, _i, _a, owner, mintTreasury, _b, _c, mintTreasuryATA, mintGlobalReferrerTreasuryATA, globalReferrerTreasuryPDA, mintGlobalReferrerTreasuryPDA, globalReferrerTreasury, owners, shares, _d, _e, owner, mintTreasury, _f, _g, refereeTokenAccount, referrerMemberPDA, referrerMember, _h, _j;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.member.fetchNullable(memberPDA)];
                case 1:
                    member = _k.sent();
                    if (!member)
                        throw MEMBER_NOT_EXIST;
                    referrerTreasuryPDA = member.referrer;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryPDA)];
                case 2:
                    referrerTreasury = _k.sent();
                    if (!referrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    mintTreasuryPDA = referrerTreasuryPDA;
                    if (!(referrerTreasury.mint.toString() !== mint.toString())) return [3 /*break*/, 5];
                    owners = [], shares = [];
                    for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                        owner = _a[_i];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    mintTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(mint));
                    return [4 /*yield*/, program.account.treasury.fetchNullable(mintTreasuryPDA)];
                case 3:
                    mintTreasury = _k.sent();
                    if (!!mintTreasury) return [3 /*break*/, 5];
                    _c = (_b = instructions).push;
                    return [4 /*yield*/, initTreasury(program, authority, owners, shares, parsePublicKey(mint))];
                case 4:
                    _c.apply(_b, [_k.sent()]);
                    _k.label = 5;
                case 5: return [4 /*yield*/, getTokenAccount(mintTreasuryPDA, mint)];
                case 6:
                    mintTreasuryATA = _k.sent();
                    mintGlobalReferrerTreasuryATA = null;
                    globalReferrerTreasuryPDA = null;
                    mintGlobalReferrerTreasuryPDA = null;
                    if (!(JSON.stringify(member.globalReferrerOfBuddy.referrerTreasuryOwnerHash) !==
                        JSON.stringify(new Array(32).fill(0)))) return [3 /*break*/, 12];
                    globalReferrerTreasuryPDA = getTreasuryPDAByHash(program, Buffer.from(member.globalReferrerOfBuddy.referrerTreasuryOwnerHash), parsePublicKey(mint));
                    return [4 /*yield*/, program.account.treasury.fetchNullable(globalReferrerTreasuryPDA)];
                case 7:
                    globalReferrerTreasury = _k.sent();
                    if (!globalReferrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    owners = [], shares = [];
                    for (_d = 0, _e = globalReferrerTreasury.owners; _d < _e.length; _d++) {
                        owner = _e[_d];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    mintGlobalReferrerTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(mint));
                    return [4 /*yield*/, program.account.treasury.fetchNullable(mintGlobalReferrerTreasuryPDA)];
                case 8:
                    mintTreasury = _k.sent();
                    if (!!mintTreasury) return [3 /*break*/, 10];
                    _g = (_f = instructions).push;
                    return [4 /*yield*/, initTreasury(program, authority, owners, shares, parsePublicKey(mint))];
                case 9:
                    _g.apply(_f, [_k.sent()]);
                    _k.label = 10;
                case 10: return [4 /*yield*/, getTokenAccount(mintGlobalReferrerTreasuryPDA, mint)];
                case 11:
                    mintGlobalReferrerTreasuryATA = _k.sent();
                    _k.label = 12;
                case 12: return [4 /*yield*/, getTokenAccount(authority, mint)];
                case 13:
                    refereeTokenAccount = _k.sent();
                    referrerMemberPDA = null;
                    if (!allowStats) return [3 /*break*/, 15];
                    return [4 /*yield*/, program.account.member.all([
                            {
                                memcmp: {
                                    offset: 41,
                                    bytes: referrerTreasuryPDA.toBase58()
                                }
                            },
                        ])];
                case 14:
                    referrerMember = (_k.sent())[0];
                    referrerMemberPDA = (referrerMember === null || referrerMember === void 0 ? void 0 : referrerMember.publicKey) || null;
                    _k.label = 15;
                case 15:
                    _j = (_h = instructions).push;
                    return [4 /*yield*/, program.methods
                            .transferRewardWithBps(new anchor.BN(amount), allowMultiLevel)
                            .accounts(__assign({ authority: authority, buddyGlobalReferrerTreasury: mintGlobalReferrerTreasuryPDA, buddyGlobalReferrerTokenAccount: mintGlobalReferrerTreasuryATA, buddy: memberPDA, referrerMember: referrerMemberPDA, referrerTreasury: referrerTreasuryPDA, referrerTreasuryForReward: mintTreasuryPDA, mint: parsePublicKey(mint), refereeTokenAccount: refereeTokenAccount, referrerTokenAccount: mintTreasuryATA }, (refereeTokenAccount
                            ? {
                                tokenProgram: TOKEN_PROGRAM_ID
                            }
                            : {
                                systemProgram: anchor.web3.SystemProgram.programId
                            })))
                            .instruction()];
                case 16:
                    _j.apply(_h, [_k.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
//# sourceMappingURL=transferRewardsWithBPS.js.map