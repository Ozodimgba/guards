import { __awaiter, __generator } from "tslib";
import { BN } from "@project-serum/anchor";
import { PublicKey, SystemProgram } from "@solana/web3.js";
import { getMemberStatisticPDA, getTokenAccount } from "../../utils/pda";
import { getTreasuryPDA } from "../../utils/pda";
import { parsePublicKey } from "../../utils/parse";
import { BUDDY_DOESNT_EXIST, REFERRER_TREASURY_DOESNT_EXIST } from "../../utils/type";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
var SA_PROGRAM_SIGNER = new PublicKey("a8fUyBUJ7PJ4ac3AJSFA5eEsVAKUszAvHSYmvtqSn5U");
export function transferRewardsStarAtlas(program, authority, mint, allowStats, amount, volume, programSigner, memberPDA) {
    var _a;
    if (programSigner === void 0) { programSigner = SA_PROGRAM_SIGNER; }
    return __awaiter(this, void 0, void 0, function () {
        var member, referrerTreasuryPDA, referrerTreasury, mintTreasuryPDA, owners, shares, _i, _b, owner, mintTreasuryATA, referrerMemberPDA, referrerMember, treasury, buddyPDA, buddyProfilePDA, buddy, referrerMemberStats, refereeTokenAccount;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!memberPDA || memberPDA.toString() === PublicKey["default"].toString()) {
                        return [2 /*return*/, []];
                    }
                    return [4 /*yield*/, program.account.member.fetchNullable(memberPDA)];
                case 1:
                    member = _c.sent();
                    if (!member || member.referrer.toString() === PublicKey["default"].toString()) {
                        return [2 /*return*/, []];
                    }
                    referrerTreasuryPDA = member.referrer;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryPDA)];
                case 2:
                    referrerTreasury = _c.sent();
                    if (!referrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    mintTreasuryPDA = referrerTreasuryPDA;
                    if (referrerTreasury.mint.toString() !== mint.toString()) {
                        owners = [], shares = [];
                        for (_i = 0, _b = referrerTreasury.owners; _i < _b.length; _i++) {
                            owner = _b[_i];
                            owners.push(owner.ownerPda);
                            shares.push(owner.share);
                        }
                        mintTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(mint));
                    }
                    return [4 /*yield*/, getTokenAccount(mintTreasuryPDA, mint)];
                case 3:
                    mintTreasuryATA = _c.sent();
                    referrerMemberPDA = PublicKey["default"];
                    if (!allowStats) return [3 /*break*/, 5];
                    return [4 /*yield*/, program.account.member.all([
                            {
                                memcmp: {
                                    offset: 41,
                                    bytes: referrerTreasuryPDA.toBase58()
                                }
                            },
                        ])];
                case 4:
                    referrerMember = (_c.sent())[0];
                    referrerMemberPDA = (referrerMember === null || referrerMember === void 0 ? void 0 : referrerMember.publicKey) || PublicKey["default"];
                    _c.label = 5;
                case 5: return [4 /*yield*/, program.account.treasury.fetch(member.owner)];
                case 6:
                    treasury = _c.sent();
                    buddyPDA = treasury.owners[0].ownerPda;
                    buddyProfilePDA = buddyPDA;
                    return [4 /*yield*/, program.account.buddy.fetch(buddyPDA)];
                case 7:
                    buddy = _c.sent();
                    if (!buddy)
                        throw BUDDY_DOESNT_EXIST;
                    if (!((_a = buddy.buddyType) === null || _a === void 0 ? void 0 : _a.profile)) {
                        buddyProfilePDA = buddy.authority;
                    }
                    referrerMemberStats = PublicKey["default"];
                    if (referrerMemberPDA.toString() !== PublicKey["default"].toString()) {
                        referrerMemberStats = getMemberStatisticPDA(program, member.organization, referrerMemberPDA);
                    }
                    return [4 /*yield*/, getTokenAccount(authority, mint)];
                case 8:
                    refereeTokenAccount = _c.sent();
                    return [4 /*yield*/, program.methods
                            .transferRewardStarAtlas(new BN(amount), new BN(volume))
                            .accounts({
                            systemProgram: SystemProgram.programId,
                            authority: authority,
                            programSigner: programSigner,
                            funder: authority,
                            mint: mint,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            referrerMember: referrerMemberPDA,
                            referrerMemberStatistics: referrerMemberStats,
                            referrerTreasury: referrerTreasuryPDA,
                            referrerTreasuryForReward: mintTreasuryPDA,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: member.owner,
                            member: memberPDA,
                            refereeTokenAccount: refereeTokenAccount,
                            referrerTokenAccount: mintTreasuryATA
                        }).instruction()];
                case 9: return [2 /*return*/, [
                        _c.sent()
                    ]];
            }
        });
    });
}
//# sourceMappingURL=transferRewardsStarAtlas.js.map