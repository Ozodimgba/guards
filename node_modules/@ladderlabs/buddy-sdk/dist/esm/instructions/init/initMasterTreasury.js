import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getTokenAccount } from "../../utils/pda";
import { MASTER_NAME, TREASURY_NAME } from "../../utils/type";
export function initMasterTreasury(program, authority, mint) {
    return __awaiter(this, void 0, void 0, function () {
        var masterOrg, treasuryPDA, treasuryATA;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, program.account.masterOrganization.all()];
                case 1:
                    masterOrg = (_a.sent())[0];
                    treasuryPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(TREASURY_NAME), Buffer.from(MASTER_NAME), mint.toBuffer()], program.programId)[0];
                    return [4 /*yield*/, getTokenAccount(treasuryPDA, mint)];
                case 2:
                    treasuryATA = _a.sent();
                    return [4 /*yield*/, program.methods
                            .initMasterOrganizationTreasury()
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrg.publicKey,
                            mint: mint,
                            masterOrganizationTreasury: treasuryPDA,
                            masterOrganizationTokenAccount: treasuryATA
                        })
                            .instruction()];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
//# sourceMappingURL=initMasterTreasury.js.map