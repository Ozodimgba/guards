import { __awaiter, __generator } from "tslib";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getBuddyNamePDA, getBuddyPDA, getTokenAccount, getTreasuryPDA, } from "../../utils/pda";
import { initTreasury } from "./initTreasury";
import { getBuddylinkBuddyAccounts } from "../../utils/accounts";
import { REFERRER_TREASURY_DOESNT_EXIST } from "../../utils/type";
export function initGlobalBuddy(program, authority, globalBuddyName, buddyProfile, usdcMint) {
    return __awaiter(this, void 0, void 0, function () {
        var instructions, buddyPDA, buddyNamePDA, walletATA, referrerTreasury, owners, shares, _i, _a, owner, referrerTreasuryUSDCPDA, referrerTreasuryUSDCATA, referrerTreasuryUSDC, _b, _c, usdcATA, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    instructions = [];
                    buddyPDA = getBuddyPDA(program, globalBuddyName);
                    buddyNamePDA = getBuddyNamePDA(program, globalBuddyName);
                    return [4 /*yield*/, getTokenAccount(authority, usdcMint, false)];
                case 1:
                    walletATA = _f.sent();
                    return [4 /*yield*/, program.account.treasury.fetchNullable(buddyProfile.referrerTreasuryPda)];
                case 2:
                    referrerTreasury = _f.sent();
                    if (!referrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    owners = [], shares = [];
                    for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                        owner = _a[_i];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    referrerTreasuryUSDCPDA = getTreasuryPDA(program, owners, shares, usdcMint);
                    return [4 /*yield*/, getTokenAccount(referrerTreasuryUSDCPDA, usdcMint)];
                case 3:
                    referrerTreasuryUSDCATA = _f.sent();
                    if (!(referrerTreasury.mint.toString() !== usdcMint.toString())) return [3 /*break*/, 6];
                    return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryUSDCPDA)];
                case 4:
                    referrerTreasuryUSDC = _f.sent();
                    if (!!referrerTreasuryUSDC) return [3 /*break*/, 6];
                    _c = (_b = instructions).push;
                    return [4 /*yield*/, initTreasury(program, authority, owners, shares, usdcMint)];
                case 5:
                    _c.apply(_b, [_f.sent()]);
                    _f.label = 6;
                case 6: return [4 /*yield*/, getBuddylinkBuddyAccounts(program, "", usdcMint)];
                case 7:
                    usdcATA = (_f.sent()).ata;
                    _e = (_d = instructions).push;
                    return [4 /*yield*/, program.methods
                            .initBuddyPaid(globalBuddyName)
                            .accounts({
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            buddyProfile: buddyProfile.pda,
                            referrerSharedTreasury: buddyProfile.referrerTreasuryPda,
                            buddy: buddyPDA,
                            buddyName: buddyNamePDA,
                            usdcMint: usdcMint,
                            usdcTokenAccount: walletATA,
                            buddylinkUsdcTokenAccount: usdcATA,
                            referrerUsdcSharedTreasury: referrerTreasuryUSDCPDA,
                            referrerUsdcTokenAccount: referrerTreasuryUSDCATA
                        })
                            .instruction()];
                case 8:
                    _e.apply(_d, [_f.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
//# sourceMappingURL=initGlobalBuddy.js.map