import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getOrganizationNamePDA, getOrganizationPDA, getTokenAccount, } from "../../utils/pda";
import { getBuddylinkBuddyAccounts } from "../../utils/accounts";
import { PROGRAM_USDC_ATA, USDC_MINT } from "../../utils/type";
export function initOrganization(program, authority, organizationName, options, ambassadorPDA, ambassadorBPS, usdcMint) {
    if (ambassadorPDA === void 0) { ambassadorPDA = null; }
    if (ambassadorBPS === void 0) { ambassadorBPS = null; }
    return __awaiter(this, void 0, void 0, function () {
        var organizationPDA, organizationNamePDA, userTokenAccount, _a, buddyPDA, ata, treasury, memberPDA, usdcATA, superAdmin;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    organizationPDA = getOrganizationPDA(program, organizationName);
                    organizationNamePDA = getOrganizationNamePDA(program, organizationName);
                    return [4 /*yield*/, getTokenAccount(authority, usdcMint, false)];
                case 1:
                    userTokenAccount = _b.sent();
                    return [4 /*yield*/, getBuddylinkBuddyAccounts(program, organizationName, options.mainTokenMint)];
                case 2:
                    _a = _b.sent(), buddyPDA = _a.buddyPDA, ata = _a.ata, treasury = _a.treasury, memberPDA = _a.memberPDA;
                    usdcATA = null;
                    if (!(usdcMint.toString() === USDC_MINT.toString())) return [3 /*break*/, 3];
                    usdcATA = PROGRAM_USDC_ATA;
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, getBuddylinkBuddyAccounts(program, organizationName, usdcMint)];
                case 4:
                    usdcATA = (_b.sent()).ata;
                    _b.label = 5;
                case 5: return [4 /*yield*/, program.account.superAdmin.all()];
                case 6:
                    superAdmin = (_b.sent())[0];
                    return [4 /*yield*/, program.methods
                            .initOrganization(organizationName, options.mainTokenMint, options.enforceWalletUniqueness, options.allowMultiLevel, ambassadorBPS, options.allowMultiAttribution, new anchor.BN(options.volumeRequiredForRewards))
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            superAdmin: superAdmin.publicKey,
                            authority: authority,
                            organization: organizationPDA,
                            organizationName: organizationNamePDA,
                            mint: options.mainTokenMint,
                            buddylinkBuddy: buddyPDA,
                            buddylinkBuddyTreasury: treasury,
                            buddylinkBuddyTokenAccount: ata,
                            buddylinkBuddyMember: memberPDA,
                            buddylinkUsdcTokenAccount: usdcATA,
                            ambassador: ambassadorPDA,
                            usdcMint: usdcMint,
                            usdcTokenAccount: userTokenAccount
                        })
                            .instruction()];
                case 7: 
                // TODO: init main token treasury if doesn't exist on master org
                return [2 /*return*/, _b.sent()];
            }
        });
    });
}
//# sourceMappingURL=initOrganization.js.map