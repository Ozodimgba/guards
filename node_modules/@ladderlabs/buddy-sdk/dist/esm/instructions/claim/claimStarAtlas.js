import { __awaiter, __generator } from "tslib";
import { PublicKey } from "@solana/web3.js";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getBlSignerPDA, getMemberStatisticPDA, getOrganizationPDA, getTokenAccount, } from "../../utils/pda";
var MAINNET_MINT = new PublicKey("GLDTKDYdSkdCzSC6fqRWqHZ5fUQGsm1CM4nMZnsCZNcX");
export function claimStarAtlasInstruction(program, authority, member, amount, mint) {
    var _a;
    if (mint === void 0) { mint = MAINNET_MINT; }
    return __awaiter(this, void 0, void 0, function () {
        var blNftSigner, memberStatsPDA, organizationPDA, buddyTreasuryPDA, buddyTreasury, buddyPDA, buddy, buddyProfilePDA, blATA, userATA, instructions, _e_1, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    blNftSigner = getBlSignerPDA(program);
                    memberStatsPDA = getMemberStatisticPDA(program, member.organization, member.pda);
                    organizationPDA = getOrganizationPDA(program, member.organization);
                    buddyTreasuryPDA = member.owner;
                    return [4 /*yield*/, program.account.treasury.fetch(buddyTreasuryPDA)];
                case 1:
                    buddyTreasury = _d.sent();
                    buddyPDA = buddyTreasury.owners[0].ownerPda;
                    return [4 /*yield*/, program.account.buddy.fetch(buddyTreasury.owners[0].ownerPda)];
                case 2:
                    buddy = _d.sent();
                    buddyProfilePDA = buddyPDA;
                    if (!((_a = buddy.buddyType) === null || _a === void 0 ? void 0 : _a.profile)) {
                        buddyProfilePDA = buddy.authority;
                    }
                    return [4 /*yield*/, getTokenAccount(blNftSigner, mint, true)];
                case 3:
                    blATA = (_d.sent());
                    return [4 /*yield*/, getTokenAccount(authority, mint)];
                case 4:
                    userATA = (_d.sent());
                    instructions = [];
                    _d.label = 5;
                case 5:
                    _d.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, program.provider.connection.getTokenAccountBalance(userATA)];
                case 6:
                    _d.sent();
                    return [3 /*break*/, 8];
                case 7:
                    _e_1 = _d.sent();
                    instructions.push(createAssociatedTokenAccountInstruction(authority, userATA, authority, mint));
                    return [3 /*break*/, 8];
                case 8:
                    _c = (_b = instructions).push;
                    return [4 /*yield*/, program.methods
                            .claimStarAtlas(new anchor.BN(amount))
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            blNftSigner: blNftSigner,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: buddyTreasuryPDA,
                            organization: organizationPDA,
                            member: member.pda,
                            memberStatistics: memberStatsPDA,
                            mint: mint,
                            buddyLinkTokenAccount: blATA,
                            userTokenAccount: userATA
                        })
                            .instruction()];
                case 9:
                    _c.apply(_b, [_d.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
//# sourceMappingURL=claimStarAtlas.js.map