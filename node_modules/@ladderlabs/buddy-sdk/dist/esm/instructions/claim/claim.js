import { __awaiter, __generator } from "tslib";
import { PublicKey } from "@solana/web3.js";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, createAssociatedTokenAccountInstruction, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getMasterTreasuryPDA, getTokenAccount, getTreasuryPDA, } from "../../utils/pda";
import { initTreasury } from "../init/initTreasury";
import { parsePublicKey } from "../../utils/parse";
import { BUDDY_DOESNT_EXIST, REFERRER_TREASURY_DOESNT_EXIST, TREASURY_DOESNT_EXIST, } from "../../utils/type";
export function claim(program, authority, buddyPDA, treasuryPDA) {
    return __awaiter(this, void 0, void 0, function () {
        var instructions, buddy, buddyProfilePDA, treasury, treasuryATA, userTokenAccount, masterOrganization, masterTreasuryPDA, masterTreasuryATA, referrerTreasuryPDA, referrerTreasuryATA, referrerTreasury, owners, shares, _i, _a, owner, newReferrerTreasuryPDA, newTreasury, _b, _c, _e_1, _d, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 1:
                    buddy = _g.sent();
                    if (!buddy)
                        throw BUDDY_DOESNT_EXIST;
                    buddyProfilePDA = buddyPDA;
                    if (buddy.authority.toString() !== authority.toString()) {
                        buddyProfilePDA = buddy.authority;
                    }
                    return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
                case 2:
                    treasury = _g.sent();
                    if (!treasury)
                        throw TREASURY_DOESNT_EXIST;
                    return [4 /*yield*/, getTokenAccount(treasuryPDA, treasury.mint)];
                case 3:
                    treasuryATA = _g.sent();
                    return [4 /*yield*/, getTokenAccount(authority, treasury.mint)];
                case 4:
                    userTokenAccount = _g.sent();
                    return [4 /*yield*/, program.account.masterOrganization.all()];
                case 5:
                    masterOrganization = (_g.sent())[0];
                    masterTreasuryPDA = getMasterTreasuryPDA(program, treasury.mint);
                    return [4 /*yield*/, getTokenAccount(masterTreasuryPDA, treasury.mint)];
                case 6:
                    masterTreasuryATA = _g.sent();
                    referrerTreasuryPDA = null, referrerTreasuryATA = null;
                    if (!(buddy.referrerTreasuryPda.toString() !== PublicKey["default"].toString())) return [3 /*break*/, 12];
                    return [4 /*yield*/, program.account.treasury.fetchNullable(buddy.referrerTreasuryPda)];
                case 7:
                    referrerTreasury = _g.sent();
                    if (!referrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    referrerTreasuryPDA = buddy.referrerTreasuryPda;
                    if (!(referrerTreasury.mint.toString() !== treasury.mint.toString())) return [3 /*break*/, 10];
                    owners = [], shares = [];
                    for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                        owner = _a[_i];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    newReferrerTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(treasury.mint));
                    referrerTreasuryPDA = newReferrerTreasuryPDA;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(newReferrerTreasuryPDA)];
                case 8:
                    newTreasury = _g.sent();
                    if (!!newTreasury) return [3 /*break*/, 10];
                    _c = (_b = instructions).push;
                    return [4 /*yield*/, initTreasury(program, authority, owners, shares, parsePublicKey(treasury.mint))];
                case 9:
                    _c.apply(_b, [_g.sent()]);
                    _g.label = 10;
                case 10: return [4 /*yield*/, getTokenAccount(referrerTreasuryPDA, treasury.mint)];
                case 11:
                    referrerTreasuryATA = _g.sent();
                    _g.label = 12;
                case 12:
                    if (!userTokenAccount) return [3 /*break*/, 16];
                    _g.label = 13;
                case 13:
                    _g.trys.push([13, 15, , 16]);
                    return [4 /*yield*/, program.provider.connection.getTokenAccountBalance(userTokenAccount)];
                case 14:
                    _g.sent();
                    return [3 /*break*/, 16];
                case 15:
                    _e_1 = _g.sent();
                    instructions.push(createAssociatedTokenAccountInstruction(authority, userTokenAccount, authority, treasury.mint));
                    return [3 /*break*/, 16];
                case 16:
                    _f = (_d = instructions).push;
                    return [4 /*yield*/, program.methods
                            .claim(null)
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrganization.publicKey,
                            masterOrganizationTreasury: masterTreasuryPDA,
                            masterOrganizationTokenAccount: masterTreasuryATA,
                            referrerTreasury: referrerTreasuryPDA,
                            referrerTokenAccount: referrerTreasuryATA,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: treasuryPDA,
                            buddyTokenAccount: treasuryATA,
                            receiverAccount: authority,
                            organization: null,
                            mint: parsePublicKey(treasury.mint),
                            userTokenAccount: userTokenAccount
                        })
                            .instruction()];
                case 17:
                    _f.apply(_d, [_g.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
//# sourceMappingURL=claim.js.map