import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getMasterTreasuryPDA, getTokenAccount } from "../../utils/pda";
import { parsePublicKey } from "../../utils/parse";
import { BUDDY_DOESNT_EXIST, TREASURY_DOESNT_EXIST } from "../../utils/type";
export function claimNoMultiLevel(program, authority, buddyPDA, treasuryPDA) {
    return __awaiter(this, void 0, void 0, function () {
        var instructions, buddy, buddyProfilePDA, treasury, treasuryATA, userTokenAccount, masterOrganization, masterTreasuryPDA, masterTreasuryATA, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 1:
                    buddy = _c.sent();
                    if (!buddy)
                        throw BUDDY_DOESNT_EXIST;
                    buddyProfilePDA = buddyPDA;
                    if (buddy.authority.toString() !== authority.toString()) {
                        buddyProfilePDA = buddy.authority;
                    }
                    return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
                case 2:
                    treasury = _c.sent();
                    if (!treasury)
                        throw TREASURY_DOESNT_EXIST;
                    return [4 /*yield*/, getTokenAccount(treasuryPDA, treasury.mint)];
                case 3:
                    treasuryATA = _c.sent();
                    return [4 /*yield*/, getTokenAccount(authority, treasury.mint)];
                case 4:
                    userTokenAccount = _c.sent();
                    return [4 /*yield*/, program.account.masterOrganization.all()];
                case 5:
                    masterOrganization = (_c.sent())[0];
                    masterTreasuryPDA = getMasterTreasuryPDA(program, treasury.mint);
                    return [4 /*yield*/, getTokenAccount(masterTreasuryPDA, treasury.mint)];
                case 6:
                    masterTreasuryATA = _c.sent();
                    _b = (_a = instructions).push;
                    return [4 /*yield*/, program.methods
                            .noMultiLevelClaim(null)
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrganization.publicKey,
                            masterOrganizationTreasury: masterTreasuryPDA,
                            masterOrganizationTokenAccount: masterTreasuryATA,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: treasuryPDA,
                            buddyTokenAccount: treasuryATA,
                            receiverAccount: authority,
                            mint: parsePublicKey(treasury.mint),
                            organization: null,
                            userTokenAccount: userTokenAccount
                        })
                            .instruction()];
                case 7:
                    _b.apply(_a, [_c.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
//# sourceMappingURL=claimNoMultiLevel.js.map