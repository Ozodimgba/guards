import { __awaiter, __generator } from "tslib";
import { PublicKey } from "@solana/web3.js";
import { getTokenAccount, getTreasuryPDAByHash } from "../../utils/pda";
import { getTreasuryPDA } from "../../utils/pda";
import { parsePublicKey } from "../../utils/parse";
import { REFERRER_TREASURY_DOESNT_EXIST } from "../../utils/type";
export function transferRewardsAccount(program, mint, allowStats, memberPDA) {
    return __awaiter(this, void 0, void 0, function () {
        var member, referrerTreasuryPDA, referrerTreasury, mintTreasuryPDA, owners, shares, _i, _a, owner, mintTreasuryATA, mintGlobalReferrerTreasuryATA, mintGlobalReferrerTreasuryPDA, globalReferrerTreasuryPDA, globalReferrerTreasury, owners, shares, _b, _c, owner, referrerMemberPDA, referrerMember;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!memberPDA || memberPDA.toString() === PublicKey["default"].toString()) {
                        return [2 /*return*/, {
                                referrerAccount: PublicKey["default"],
                                referrerAccountRewards: PublicKey["default"],
                                referreeAccount: PublicKey["default"],
                                globalReferrerTreasury: PublicKey["default"],
                                globalReferrerTokenAccount: program.programId,
                                mint: program.programId,
                                referrerTokenAccount: program.programId
                            }];
                    }
                    return [4 /*yield*/, program.account.member.fetchNullable(memberPDA)];
                case 1:
                    member = _d.sent();
                    if (!member || member.referrer.toString() === PublicKey["default"].toString()) {
                        return [2 /*return*/, {
                                referrerAccount: PublicKey["default"],
                                referrerAccountRewards: PublicKey["default"],
                                referreeAccount: PublicKey["default"],
                                globalReferrerTreasury: PublicKey["default"],
                                globalReferrerTokenAccount: program.programId,
                                mint: program.programId,
                                referrerTokenAccount: program.programId
                            }];
                    }
                    referrerTreasuryPDA = member.referrer;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryPDA)];
                case 2:
                    referrerTreasury = _d.sent();
                    if (!referrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    mintTreasuryPDA = referrerTreasuryPDA;
                    if (referrerTreasury.mint.toString() !== mint.toString()) {
                        owners = [], shares = [];
                        for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                            owner = _a[_i];
                            owners.push(owner.ownerPda);
                            shares.push(owner.share);
                        }
                        mintTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(mint));
                    }
                    return [4 /*yield*/, getTokenAccount(mintTreasuryPDA, mint)];
                case 3:
                    mintTreasuryATA = _d.sent();
                    mintGlobalReferrerTreasuryATA = null;
                    mintGlobalReferrerTreasuryPDA = null;
                    if (!(JSON.stringify(member.globalReferrerOfBuddy.referrerTreasuryOwnerHash) !==
                        JSON.stringify(new Array(32).fill(0)))) return [3 /*break*/, 6];
                    globalReferrerTreasuryPDA = getTreasuryPDAByHash(program, Buffer.from(member.globalReferrerOfBuddy.referrerTreasuryOwnerHash), parsePublicKey(mint));
                    return [4 /*yield*/, program.account.treasury.fetchNullable(globalReferrerTreasuryPDA)];
                case 4:
                    globalReferrerTreasury = _d.sent();
                    if (!globalReferrerTreasury)
                        throw REFERRER_TREASURY_DOESNT_EXIST;
                    owners = [], shares = [];
                    for (_b = 0, _c = globalReferrerTreasury.owners; _b < _c.length; _b++) {
                        owner = _c[_b];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    mintGlobalReferrerTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(mint));
                    return [4 /*yield*/, getTokenAccount(mintGlobalReferrerTreasuryPDA, mint)];
                case 5:
                    mintGlobalReferrerTreasuryATA = _d.sent();
                    _d.label = 6;
                case 6:
                    referrerMemberPDA = null;
                    if (!allowStats) return [3 /*break*/, 8];
                    return [4 /*yield*/, program.account.member.all([
                            {
                                memcmp: {
                                    offset: 41,
                                    bytes: referrerTreasuryPDA.toBase58()
                                }
                            },
                        ])];
                case 7:
                    referrerMember = (_d.sent())[0];
                    referrerMemberPDA = (referrerMember === null || referrerMember === void 0 ? void 0 : referrerMember.publicKey) || null;
                    _d.label = 8;
                case 8: return [2 /*return*/, {
                        referrerMemberAccount: referrerMemberPDA,
                        referrerAccount: referrerTreasuryPDA,
                        referrerAccountRewards: mintTreasuryPDA,
                        referreeAccount: memberPDA,
                        globalReferrerTreasury: mintGlobalReferrerTreasuryPDA || program.programId,
                        globalReferrerTokenAccount: mintGlobalReferrerTreasuryATA || program.programId,
                        mint: parsePublicKey(mint) || program.programId,
                        referrerTokenAccount: mintTreasuryATA || program.programId
                    }];
            }
        });
    });
}
//# sourceMappingURL=transferRewardsAccounts.js.map