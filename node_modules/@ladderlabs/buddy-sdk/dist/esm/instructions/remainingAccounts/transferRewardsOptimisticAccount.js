import { __awaiter, __generator } from "tslib";
import { PublicKey } from "@solana/web3.js";
import { parsePublicKey } from "../../utils/parse";
import { getBuddyPDA, getMemberPDA, getMemberStatisticPDA, getOrganizationPDA, getTokenAccount, getTreasuryPDA } from "../../utils/pda";
import { Client } from "../../client/Client";
export function transferRewardsOptimisticAccount(program, profileName, // can only be profile
memberName, organizationName, mint, referrerHash) {
    return __awaiter(this, void 0, void 0, function () {
        var defaultReturn, organizationPDA, organization, referrerMemberPDA, referrerMember, referrerTreasuryPDA, _a, buddyNames, shares, buddyPDAs, referrerBuddyPDA, referrerTreasury, referrerTreasuryRewardsPDA, shares, owners, _i, _b, owner, profilePDA, memberPDA, treasuryPDA, referrerTokenAccount, _c, referrerMemberStats;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    defaultReturn = {
                        referrerMember: PublicKey["default"],
                        referrerTreasury: PublicKey["default"],
                        referrerTreasuryRewards: PublicKey["default"],
                        referrerMemberStatistics: PublicKey["default"],
                        buddyProfile: PublicKey["default"],
                        buddy: PublicKey["default"],
                        buddyTreasury: PublicKey["default"],
                        member: PublicKey["default"],
                        referrerTokenAccount: program.programId,
                        mint: program.programId,
                        programId: program.programId
                    };
                    if (!referrerHash)
                        return [2 /*return*/, defaultReturn];
                    organizationPDA = getOrganizationPDA(program, organizationName);
                    return [4 /*yield*/, program.account.organization.fetch(organizationPDA)];
                case 1:
                    organization = _d.sent();
                    referrerMemberPDA = PublicKey["default"];
                    referrerMember = null;
                    referrerTreasuryPDA = PublicKey["default"];
                    if (!referrerHash.endsWith('$')) return [3 /*break*/, 2];
                    _a = Client.decryptHash(referrerHash), buddyNames = _a[0], shares = _a[1];
                    buddyPDAs = buddyNames.map(function (buddyName) { return getBuddyPDA(program, buddyName); });
                    referrerTreasuryPDA = getTreasuryPDA(program, buddyPDAs, shares, organization.mainTokenMint);
                    return [3 /*break*/, 6];
                case 2:
                    referrerMemberPDA = getMemberPDA(program, organizationName, referrerHash);
                    return [4 /*yield*/, program.account.member.fetchNullable(referrerMemberPDA)];
                case 3:
                    referrerMember = _d.sent();
                    if (!referrerMember) return [3 /*break*/, 4];
                    referrerTreasuryPDA = referrerMember.owner;
                    return [3 /*break*/, 6];
                case 4:
                    referrerBuddyPDA = getBuddyPDA(program, referrerHash);
                    referrerTreasuryPDA = getTreasuryPDA(program, [referrerBuddyPDA], [10000], organization.mainTokenMint);
                    return [4 /*yield*/, program.account.member.all([
                            { memcmp: { offset: 41, bytes: referrerTreasuryPDA.toBase58() } },
                        ])];
                case 5:
                    referrerMember = (_d.sent())[0];
                    referrerMemberPDA = (referrerMember === null || referrerMember === void 0 ? void 0 : referrerMember.publicKey) || PublicKey["default"];
                    _d.label = 6;
                case 6: return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryPDA)];
                case 7:
                    referrerTreasury = _d.sent();
                    if (!referrerTreasury)
                        return [2 /*return*/, defaultReturn];
                    referrerTreasuryRewardsPDA = referrerTreasuryPDA;
                    if (referrerTreasury.mint.toString() !== mint.toString()) {
                        shares = [], owners = [];
                        for (_i = 0, _b = referrerTreasury.owners; _i < _b.length; _i++) {
                            owner = _b[_i];
                            shares.push(owner.share);
                            owners.push(owner.ownerPda);
                        }
                        referrerTreasuryRewardsPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(mint));
                    }
                    profilePDA = getBuddyPDA(program, profileName);
                    memberPDA = getMemberPDA(program, organizationName, memberName);
                    treasuryPDA = getTreasuryPDA(program, [profilePDA], [10000], organization.mainTokenMint);
                    if (!(parsePublicKey(mint) && referrerTreasuryRewardsPDA)) return [3 /*break*/, 9];
                    return [4 /*yield*/, getTokenAccount(referrerTreasuryRewardsPDA, mint)];
                case 8:
                    _c = _d.sent();
                    return [3 /*break*/, 10];
                case 9:
                    _c = program.programId;
                    _d.label = 10;
                case 10:
                    referrerTokenAccount = _c;
                    referrerMemberStats = PublicKey["default"];
                    if (referrerMemberPDA.toString() !== PublicKey["default"].toString()) {
                        referrerMemberStats = getMemberStatisticPDA(program, organizationName, referrerMemberPDA);
                    }
                    return [2 /*return*/, {
                            referrerMember: referrerMemberPDA,
                            referrerTreasury: referrerTreasuryPDA,
                            referrerTreasuryRewards: referrerTreasuryRewardsPDA,
                            referrerMemberStatistics: referrerMemberStats,
                            buddyProfile: profilePDA,
                            buddy: profilePDA,
                            buddyTreasury: treasuryPDA,
                            member: memberPDA,
                            referrerTokenAccount: referrerTokenAccount,
                            mint: parsePublicKey(mint) || program.programId,
                            programId: program.programId
                        }];
            }
        });
    });
}
//# sourceMappingURL=transferRewardsOptimisticAccount.js.map