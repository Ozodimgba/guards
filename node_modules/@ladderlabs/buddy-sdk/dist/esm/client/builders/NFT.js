import { __awaiter, __generator } from "tslib";
import { Keypair } from "@solana/web3.js";
import { NO_WALLET_ERROR } from "../../utils/type";
import { redeemPaidBuddy } from "../../instructions/nft/redeemPaidBuddy";
import { mintPaidBuddy } from "../../instructions/nft/mintPaidBuddy";
import { getBuddyPDA, getOrganizationPDA } from "../../utils/pda";
import { claimNFTPaidBuddy } from "../../instructions/nft/claimNFTPaidBuddy";
import { claimNFTOrganization } from "../../instructions/nft/claimNFTOrganization";
var NFT = /** @class */ (function () {
    function NFT(program, wallet) {
        this.program = program;
        this.wallet = wallet;
    }
    NFT.prototype.generateNftMint = function () {
        return Keypair.generate();
    };
    NFT.prototype.claimNFTOrganization = function (organizationName, options, nftMint) {
        return __awaiter(this, void 0, void 0, function () {
            var organizationPDA;
            return __generator(this, function (_a) {
                if (!this.wallet)
                    throw NO_WALLET_ERROR;
                organizationPDA = getOrganizationPDA(this.program, organizationName.toLowerCase());
                return [2 /*return*/, claimNFTOrganization(this.program, this.wallet, organizationPDA, organizationName.toLowerCase(), options, nftMint)];
            });
        });
    };
    NFT.prototype.claimNFTPaidBuddy = function (buddyProfilePDA, paidBuddyName, nftMint) {
        return __awaiter(this, void 0, void 0, function () {
            var paidBuddyPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        paidBuddyPDA = getBuddyPDA(this.program, paidBuddyName.toLowerCase());
                        return [4 /*yield*/, claimNFTPaidBuddy(this.program, this.wallet, buddyProfilePDA, paidBuddyPDA, nftMint)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    NFT.prototype.redeemPaidBuddy = function (buddyProfilePDA, paidBuddyPDA, nftMint) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, redeemPaidBuddy(this.program, this.wallet, buddyProfilePDA, paidBuddyPDA, nftMint)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    NFT.prototype.mintPaidBuddy = function (buddyProfilePDA, paidBuddyPDA, generatedMintAddress, collectionMint) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, mintPaidBuddy(this.program, this.wallet, buddyProfilePDA, paidBuddyPDA, generatedMintAddress, collectionMint)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return NFT;
}());
export { NFT };
//# sourceMappingURL=NFT.js.map