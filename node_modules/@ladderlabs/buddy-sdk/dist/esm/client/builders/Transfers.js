import { __awaiter, __generator } from "tslib";
import { PublicKey } from "@solana/web3.js";
import { NO_WALLET_ERROR } from "../../utils/type";
import { parsePublicKey } from "../../utils/parse";
import { transferRewards } from "../../instructions/transfers/transferRewards";
import { transferRewardsNoMultiLevel } from "../../instructions/transfers/transferRewardsNoMultiLevel";
import { transferRewardsWithBPS } from "../../instructions/transfers/transferRewardsWithBPS";
import { transferRewardsGlobalBuddies } from "../../instructions/transfers/transferRewardsGlobalBuddies";
import { transferRewardsStarAtlas } from "../../instructions/transfers/transferRewardsStarAtlas";
var Transfer = /** @class */ (function () {
    function Transfer(program, wallet) {
        this.program = program;
        this.wallet = wallet;
    }
    Transfer.prototype.getProgramId = function () {
        return this.program.programId;
    };
    Transfer.prototype.transferRewards = function (memberPDA, amount, mint, allowMultiLevel, allowStats) {
        if (allowMultiLevel === void 0) { allowMultiLevel = true; }
        if (allowStats === void 0) { allowStats = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, transferRewards(this.program, this.wallet, memberPDA, amount, allowMultiLevel, allowStats, parsePublicKey(mint) ? mint : PublicKey["default"])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Transfer.prototype.transferRewardsNoMultiLevel = function (receiveMemberPDA, amount, mint, allowStats) {
        if (allowStats === void 0) { allowStats = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, transferRewardsNoMultiLevel(this.program, this.wallet, receiveMemberPDA, amount, parsePublicKey(mint) ? mint : PublicKey["default"], allowStats)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Transfer.prototype.transferRewardsWithBPS = function (memberPDA, amount, mint, allowMultiLevel, allowStats) {
        if (allowMultiLevel === void 0) { allowMultiLevel = true; }
        if (allowStats === void 0) { allowStats = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, transferRewardsWithBPS(this.program, this.wallet, memberPDA, amount, allowMultiLevel, parsePublicKey(mint) ? mint : PublicKey["default"], allowStats)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Transfer.prototype.transferRewardsGlobalBuddies = function (buddyPDA, amount, mint) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, transferRewardsGlobalBuddies(this.program, this.wallet, buddyPDA, amount, parsePublicKey(mint) ? mint : PublicKey["default"])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Transfer.prototype.transferRewardsStarAtlas = function (amount, volume, memberPDA, mint, allowStats, programSigner) {
        if (allowStats === void 0) { allowStats = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, transferRewardsStarAtlas(this.program, this.wallet, mint, allowStats, amount, volume, programSigner, memberPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Transfer;
}());
export { Transfer };
//# sourceMappingURL=Transfers.js.map