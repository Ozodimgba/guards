import { Program } from "@project-serum/anchor";
import { PublicKey, TransactionInstruction } from "@solana/web3.js";
import { Buddylink } from "../../idl/buddylink";
import { OrganizationConfiguration } from "../../instructions/init/initOrganization";
export declare class Initializer {
    private program;
    private wallet?;
    private usdcMint?;
    constructor(program: Program<Buddylink>, wallet?: PublicKey);
    inject(usdcMint: PublicKey): this;
    isReferrerValid(referrerHash?: string, organizationName?: string): Promise<boolean>;
    createMasterTreasury(mint: PublicKey): Promise<TransactionInstruction>;
    createMemberStatistics(organizationName: string, memberName: string): Promise<TransactionInstruction[]>;
    createMemberWithRewards(organizationName: string, memberName: string, rewardsMint?: PublicKey | null, referrerHash?: string, // can be member name or buddy name or shared treasury
    payer?: PublicKey | null, buddyName?: string): Promise<TransactionInstruction[]>;
    createMember(organizationName: string, memberName: string, referrerHash?: string, // can be member name or buddy name or shared treasury
    payer?: PublicKey | null, buddyName?: string): Promise<TransactionInstruction[]>;
    private createReferrerMember;
    createProfile(buddyName: string, referralHash?: string, // assumes always buddy
    mint?: PublicKey, payer?: PublicKey | null): Promise<TransactionInstruction[]>;
    createOrganization(name: string, options: OrganizationConfiguration, ambassadorName?: string): Promise<TransactionInstruction[]>;
    createSharedTreasuryByHash(hash: string, mint?: PublicKey): Promise<TransactionInstruction[]>;
    createTreasuryByName(buddyName: string, mint?: PublicKey): Promise<TransactionInstruction[]>;
    createTreasuryByBuddyPDA(buddyPDA: PublicKey, mint?: PublicKey): Promise<TransactionInstruction[]>;
    createSharedTreasuryByName(buddyNames: string[], shares: number[], mint?: PublicKey): Promise<TransactionInstruction[]>;
    createSharedTreasuryByPDA(buddyPDAs: PublicKey[], shares: number[], mint?: PublicKey): Promise<TransactionInstruction[]>;
    private getBuddyReferrer;
    isReferrerMember(organizationName?: string, referrer?: string): Promise<boolean>;
}
