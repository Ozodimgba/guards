import { __assign, __awaiter, __generator } from "tslib";
import { NO_WALLET_ERROR } from "../../utils/type";
import { Organization } from "../../models/Organization";
import { getOrganizationPDA } from "../../utils/pda";
var OrganizationProvider = /** @class */ (function () {
    function OrganizationProvider(program, wallet) {
        this.program = program;
        this.wallet = wallet;
    }
    OrganizationProvider.prototype.getByPDA = function (organizationPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var organization;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.organization.fetchNullable(organizationPDA)];
                    case 1:
                        organization = _a.sent();
                        if (!organization)
                            return [2 /*return*/, null];
                        return [2 /*return*/, new Organization(__assign(__assign({}, organization), { pda: organizationPDA }), this.program, this.wallet)];
                }
            });
        });
    };
    OrganizationProvider.prototype.getByName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var organizationPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        organizationPDA = getOrganizationPDA(this.program, name.toLowerCase());
                        return [4 /*yield*/, this.getByPDA(organizationPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationProvider.prototype.getByWallet = function (wallet) {
        return __awaiter(this, void 0, void 0, function () {
            var orgs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet && wallet)
                            throw NO_WALLET_ERROR;
                        return [4 /*yield*/, this.program.account.organization.all([
                                {
                                    memcmp: {
                                        offset: 8,
                                        bytes: wallet ? wallet.toBase58() : this.wallet.toBase58()
                                    }
                                },
                            ])];
                    case 1:
                        orgs = (_a.sent()).map(function (organization) {
                            return new Organization(__assign(__assign({}, organization.account), { pda: organization.publicKey }), _this.program, wallet ? wallet : _this.wallet);
                        });
                        return [2 /*return*/, orgs];
                }
            });
        });
    };
    return OrganizationProvider;
}());
export { OrganizationProvider };
//# sourceMappingURL=OrganizationProvider.js.map