import { __assign, __awaiter, __generator } from "tslib";
import { Member } from "../../models/Member";
import { getBuddyNamePDA, getMemberPDA } from "../../utils/pda";
var MemberProvider = /** @class */ (function () {
    function MemberProvider(program, wallet) {
        this.program = program;
        this.wallet = wallet;
    }
    MemberProvider.prototype.getAll = function (
    // organizationName?: string
    ) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.member.all()];
                    case 1: 
                    // if (organizationName) {
                    //   return await this.program.account.member.all([{
                    //     memcmp: {
                    //       offset: 141,
                    //       bytes: bs58.encode(Buffer.from(organizationName))
                    //     }
                    //   }])
                    // } else {
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MemberProvider.prototype.getAllStatistics = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.memberStatistics.all()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MemberProvider.prototype.isMemberAvailable = function (organizationName, memberName) {
        return __awaiter(this, void 0, void 0, function () {
            var memberPDA, buddyNamePDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        memberPDA = getMemberPDA(this.program, organizationName.toString(), memberName.toLowerCase());
                        buddyNamePDA = getBuddyNamePDA(this.program, memberName);
                        return [4 /*yield*/, this.program.account.nameCheck.fetchNullable(buddyNamePDA)];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.program.account.member.fetchNullable(memberPDA)];
                    case 2: return [2 /*return*/, !(_a.sent())];
                }
            });
        });
    };
    MemberProvider.prototype.getByPDA = function (memberPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var member;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.member.fetchNullable(memberPDA)];
                    case 1:
                        member = _a.sent();
                        if (!member)
                            return [2 /*return*/, null];
                        return [2 /*return*/, new Member(__assign(__assign({}, member), { pda: memberPDA }), this.program, this.wallet)];
                }
            });
        });
    };
    MemberProvider.prototype.getByName = function (organizationName, memberName) {
        return __awaiter(this, void 0, void 0, function () {
            var memberPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        memberPDA = getMemberPDA(this.program, organizationName.toLowerCase(), memberName.toLowerCase());
                        return [4 /*yield*/, this.getByPDA(memberPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MemberProvider.prototype.getByTreasuryOwner = function (treasuryPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var members;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.member.all([
                            { memcmp: { offset: 41, bytes: treasuryPDA.toBase58() } },
                        ])];
                    case 1:
                        members = (_a.sent()).map(function (member) {
                            return new Member(__assign(__assign({}, member.account), { pda: member.publicKey }), _this.program, _this.wallet);
                        });
                        return [2 /*return*/, members];
                }
            });
        });
    };
    MemberProvider.prototype.getByTreasuryReferrer = function (treasuryPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var members;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.member.all([
                            { memcmp: { offset: 9, bytes: treasuryPDA.toBase58() } },
                        ])];
                    case 1:
                        members = (_a.sent()).map(function (member) {
                            return new Member(__assign(__assign({}, member.account), { pda: member.publicKey }), _this.program, _this.wallet);
                        });
                        return [2 /*return*/, members];
                }
            });
        });
    };
    return MemberProvider;
}());
export { MemberProvider };
//# sourceMappingURL=MemberProvider.js.map