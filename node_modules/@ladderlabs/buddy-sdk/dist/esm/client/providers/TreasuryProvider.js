import { __assign, __awaiter, __generator, __spreadArray } from "tslib";
import { Treasury } from "../../models/Treasury";
import { getBuddyPDA, getMemberPDA, getTreasuryPDA } from "../../utils/pda";
import { MEMBER_ERROR } from "../../utils/type";
import { parsePublicKey } from "../../utils/parse";
var TreasuryProvider = /** @class */ (function () {
    function TreasuryProvider(program, wallet) {
        this.program = program;
        this.wallet = wallet;
    }
    TreasuryProvider.prototype.getByMemberOwner = function (organizationName, memberName) {
        return __awaiter(this, void 0, void 0, function () {
            var memberPDA, member;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        memberPDA = getMemberPDA(this.program, organizationName, memberName);
                        return [4 /*yield*/, this.program.account.member.fetchNullable(memberPDA)];
                    case 1:
                        member = _a.sent();
                        if (!member)
                            throw MEMBER_ERROR.replace("{}", memberName.toLowerCase());
                        return [4 /*yield*/, this.program.account.treasury.fetch(member.owner)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByMemberReferrer = function (organizationName, memberName) {
        return __awaiter(this, void 0, void 0, function () {
            var memberPDA, member;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        memberPDA = getMemberPDA(this.program, organizationName, memberName);
                        return [4 /*yield*/, this.program.account.member.fetch(memberPDA)];
                    case 1:
                        member = _a.sent();
                        if (!member)
                            throw MEMBER_ERROR.replace("{}", memberName.toLowerCase());
                        return [4 /*yield*/, this.program.account.treasury.fetch(member.referrer)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByPDA = function (treasuryPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var treasury;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.treasury.fetchNullable(treasuryPDA)];
                    case 1:
                        treasury = _a.sent();
                        if (!treasury)
                            return [2 /*return*/, null];
                        return [2 /*return*/, new Treasury(__assign(__assign({}, treasury), { pda: treasuryPDA }), this.program, this.wallet)];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByBuddyName = function (buddyName, mint) {
        return __awaiter(this, void 0, void 0, function () {
            var buddyPDA, treasuryPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buddyPDA = getBuddyPDA(this.program, buddyName.toLowerCase());
                        treasuryPDA = getTreasuryPDA(this.program, [buddyPDA], [10000], parsePublicKey(mint));
                        return [4 /*yield*/, this.getByPDA(treasuryPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByOwner = function (buddyOwner, mint) {
        return __awaiter(this, void 0, void 0, function () {
            var treasuryPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        treasuryPDA = getTreasuryPDA(this.program, [buddyOwner], [10000], parsePublicKey(mint));
                        return [4 /*yield*/, this.getByPDA(treasuryPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByOwners = function (buddyOwners, shares, mint) {
        return __awaiter(this, void 0, void 0, function () {
            var treasuryPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        treasuryPDA = getTreasuryPDA(this.program, buddyOwners, shares, parsePublicKey(mint));
                        return [4 /*yield*/, this.getByPDA(treasuryPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByOwnerNames = function (buddyOwnerNames, shares, mint) {
        return __awaiter(this, void 0, void 0, function () {
            var pdas, _i, buddyOwnerNames_1, owner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pdas = [];
                        for (_i = 0, buddyOwnerNames_1 = buddyOwnerNames; _i < buddyOwnerNames_1.length; _i++) {
                            owner = buddyOwnerNames_1[_i];
                            pdas.push(getBuddyPDA(this.program, owner.toLowerCase()));
                        }
                        return [4 /*yield*/, this.getByOwners(pdas, shares, mint)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getByBuddy = function (buddy, mint) {
        return __awaiter(this, void 0, void 0, function () {
            var treasuryPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        treasuryPDA = getTreasuryPDA(this.program, [buddy.account.pda], [10000], parsePublicKey(mint));
                        return [4 /*yield*/, this.getByPDA(treasuryPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TreasuryProvider.prototype.getAllByBuddy = function (buddyPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var offsets, fetchPromises, _i, offsets_1, offset, _a, fetch1, fetch2, fetch3, fetch4, treasuries;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        offsets = [55, 121, 187, 251];
                        fetchPromises = [];
                        for (_i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {
                            offset = offsets_1[_i];
                            fetchPromises.push(this.program.account.treasury.all([
                                { memcmp: { offset: offset, bytes: buddyPDA.toBase58() } },
                            ]));
                        }
                        return [4 /*yield*/, Promise.all(fetchPromises)];
                    case 1:
                        _a = _b.sent(), fetch1 = _a[0], fetch2 = _a[1], fetch3 = _a[2], fetch4 = _a[3];
                        treasuries = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], fetch1, true), fetch2, true), fetch3, true), fetch4, true).map(function (treasury) {
                            return new Treasury(__assign(__assign({}, treasury.account), { pda: treasury.publicKey }), _this.program, _this.wallet);
                        });
                        return [2 /*return*/, treasuries];
                }
            });
        });
    };
    TreasuryProvider.prototype.getAllSimpleByBuddy = function (buddyPDA) {
        return __awaiter(this, void 0, void 0, function () {
            var treasuries;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.treasury.all([
                            {
                                memcmp: {
                                    offset: 55,
                                    bytes: buddyPDA.toBase58()
                                }
                            },
                        ])];
                    case 1:
                        treasuries = (_a.sent()).map(function (treasury) {
                            return new Treasury(__assign(__assign({}, treasury.account), { pda: treasury.publicKey }), _this.program, _this.wallet);
                        });
                        return [2 /*return*/, treasuries];
                }
            });
        });
    };
    return TreasuryProvider;
}());
export { TreasuryProvider };
//# sourceMappingURL=TreasuryProvider.js.map