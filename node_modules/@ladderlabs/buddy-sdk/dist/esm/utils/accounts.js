import { __awaiter, __generator } from "tslib";
import { getOrganizationNamePDA, getOrganizationPDA, getTokenAccount, getTreasuryPDAByHash, } from "./pda";
import { PublicKey } from "@solana/web3.js";
import { createHash } from "crypto";
import { BUDDY_LINK_BUDDY_NAME, BUDDY_NAME, FORCED_REFERRER_BPS, MEMBER_NAME, } from "./type";
import { parsePublicKey } from "./parse";
export function getOrganizationAccounts(program, name) {
    var organizationPDA = getOrganizationPDA(program, name);
    var organizationNamePDA = getOrganizationNamePDA(program, name);
    return {
        organizationPDA: organizationPDA,
        organizationNamePDA: organizationNamePDA
    };
}
export function getBuddylinkBuddyAccounts(program, organization, mint) {
    return __awaiter(this, void 0, void 0, function () {
        var blPDA, memberPDA, hashedBuddyInBytes, blTreasury, blTokenAccount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blPDA = PublicKey.findProgramAddressSync([Buffer.from(BUDDY_NAME), Buffer.from(BUDDY_LINK_BUDDY_NAME)], program.programId)[0];
                    memberPDA = PublicKey.findProgramAddressSync([
                        Buffer.from(MEMBER_NAME),
                        Buffer.from(organization),
                        Buffer.from("_"),
                        Buffer.from(BUDDY_LINK_BUDDY_NAME),
                    ], program.programId)[0];
                    hashedBuddyInBytes = createHash("sha256")
                        .update("".concat(blPDA, "10000").concat(FORCED_REFERRER_BPS.toString()))
                        .digest();
                    blTreasury = getTreasuryPDAByHash(program, hashedBuddyInBytes, parsePublicKey(mint));
                    return [4 /*yield*/, getTokenAccount(blTreasury, mint)];
                case 1:
                    blTokenAccount = _a.sent();
                    return [2 /*return*/, {
                            buddyPDA: blPDA,
                            treasury: blTreasury,
                            ata: blTokenAccount,
                            memberPDA: memberPDA
                        }];
            }
        });
    });
}
//# sourceMappingURL=accounts.js.map