import { __awaiter, __generator } from "tslib";
import * as anchor from "@project-serum/anchor";
import { AMBASSADOR_NAME, BUDDY_NAME, BUDDY_NAME_CHECK, FORCED_REFERRER_BPS, MASTER_NAME, MEMBER_NAME, MEMBER_NAME_CHECK, METADATA_PROGRAM_ID, MINT_SOLANA_NAME, ORGANIZATION_NAME, ORGANIZATION_NAME_CHECK, PAID_BUDDY_CHECK, TREASURY_NAME, } from "./type";
import { ComputeBudgetProgram, } from "@solana/web3.js";
import { createHash } from "crypto";
import { getAssociatedTokenAddress } from "@solana/spl-token";
import { parsePublicKey } from "./parse";
export function increaseComputeLimit(newLimit) {
    if (newLimit === void 0) { newLimit = 500000; }
    return ComputeBudgetProgram.setComputeUnitLimit({
        units: newLimit
    });
}
// Organization
export function getOrganizationPDA(program, name) {
    var organizationPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(ORGANIZATION_NAME), Buffer.from(name)], program.programId)[0];
    return organizationPDA;
}
export function getOrganizationNamePDA(program, name) {
    var organizationNamePDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(ORGANIZATION_NAME_CHECK), Buffer.from(name)], program.programId)[0];
    return organizationNamePDA;
}
// Buddy
export function getBuddyPDA(program, name) {
    var buddyPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(BUDDY_NAME), Buffer.from(name)], program.programId)[0];
    return buddyPDA;
}
export function getBuddyNameProfilePDA(program, wallet) {
    var buddyNamePDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(BUDDY_NAME_CHECK), wallet.toBuffer()], program.programId)[0];
    return buddyNamePDA;
}
export function getBuddyNamePDA(program, name) {
    var buddyNamePDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(PAID_BUDDY_CHECK), Buffer.from(name)], program.programId)[0];
    return buddyNamePDA;
}
// Member
export function getMemberPDA(program, organization, name) {
    var memberPDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(MEMBER_NAME),
        Buffer.from(organization),
        Buffer.from("_"),
        Buffer.from(name),
    ], program.programId)[0];
    return memberPDA;
}
export function getMemberNamePDA(program, organizationName, wallet) {
    var buddyNamePDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(MEMBER_NAME_CHECK),
        Buffer.from(organizationName),
        Buffer.from("_"),
        wallet.toBuffer(),
    ], program.programId)[0];
    return buddyNamePDA;
}
// Treasury
export function getHashTreasury(owners, shares) {
    var stringToHash = "";
    for (var i = 0; i < owners.length; i++) {
        stringToHash += owners[i].toString() + Math.floor(shares[i]);
    }
    var hashInBytes = createHash("sha256")
        .update("".concat(stringToHash).concat(FORCED_REFERRER_BPS.toString()))
        .digest();
    return hashInBytes;
}
export function getTreasuryPDAByHash(program, hash, mint) {
    var treasuryPDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(TREASURY_NAME),
        parsePublicKey(mint) ? mint.toBuffer() : Buffer.from(MINT_SOLANA_NAME),
        Buffer.from(hash),
    ], program.programId)[0];
    return treasuryPDA;
}
export function getTreasuryPDA(program, owners, shares, mint) {
    var hash = getHashTreasury(owners, shares);
    return getTreasuryPDAByHash(program, hash, parsePublicKey(mint));
}
export function getTokenAccount(account, mint, isOffCurve) {
    if (isOffCurve === void 0) { isOffCurve = true; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!parsePublicKey(mint))
                        return [2 /*return*/, null];
                    return [4 /*yield*/, getAssociatedTokenAddress(mint, account, isOffCurve)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
// Ambassador
export function getAmbassadorPDA(program, name) {
    var ambassadorPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(AMBASSADOR_NAME), Buffer.from(name)], program.programId)[0];
    return ambassadorPDA;
}
// Master Organization
export function getMasterTreasuryPDA(program, mint) {
    var masterTreasuryPDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(TREASURY_NAME),
        Buffer.from(MASTER_NAME),
        parsePublicKey(mint) ? mint.toBuffer() : Buffer.from(MINT_SOLANA_NAME),
    ], program.programId)[0];
    return masterTreasuryPDA;
}
export function getBlSignerPDA(program) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("bl_nft_signer_")], program.programId)[0];
}
export function getMemberStatisticPDA(program, organizationName, memberPDA) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("member_stats_"), Buffer.from(organizationName), Buffer.from("_"), memberPDA.toBuffer()], program.programId)[0];
}
export function findMasterEdition(mint) {
    return anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from("metadata"),
        METADATA_PROGRAM_ID.toBuffer(),
        mint.toBuffer(),
        Buffer.from("edition"),
    ], METADATA_PROGRAM_ID)[0];
}
export function findMetadataAddress(mint) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("metadata"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], METADATA_PROGRAM_ID)[0];
}
export function findBLDataMetadataAddress(mint, programId) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("metadata_"), mint.toBuffer()], programId)[0];
}
//# sourceMappingURL=pda.js.map