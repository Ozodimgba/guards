"use strict";
exports.__esModule = true;
exports.initMember = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var pda_1 = require("../../utils/pda");
var parse_1 = require("../../utils/parse");
var spl_token_1 = require("@solana/spl-token");
var type_1 = require("../../utils/type");
function initMember(program, authority, memberName, organization, buddy, buddyProfile, 
//@ts-ignore
referrers, referrerTreasuryPDA, payer) {
    if (payer === void 0) { payer = null; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var memberPDA, memberNamePDA, buddyTreasuryPDA, buddyTreasuryATA, referrerTreasuryATA, _a, method;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!organization)
                        throw type_1.ORGANIZATION_PDA_NOT_EXIST;
                    memberPDA = (0, pda_1.getMemberPDA)(program, organization.name, memberName);
                    memberNamePDA = (0, pda_1.getMemberNamePDA)(program, organization.name, (buddyProfile === null || buddyProfile === void 0 ? void 0 : buddyProfile.authority) || authority // In case authority of referrer is not the wallet authority
                    );
                    buddyTreasuryPDA = (0, pda_1.getTreasuryPDA)(program, [buddy.pda], [10000], (0, parse_1.parsePublicKey)(organization.mainTokenMint));
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(buddyTreasuryPDA, organization.mainTokenMint)];
                case 1:
                    buddyTreasuryATA = _b.sent();
                    if (!referrerTreasuryPDA) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(referrerTreasuryPDA, organization.mainTokenMint)];
                case 2:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _a = null;
                    _b.label = 4;
                case 4:
                    referrerTreasuryATA = _a;
                    method = payer ? program.methods
                        .initMemberWithPayer(memberName) : program.methods
                        .initMember(memberName);
                    return [4 /*yield*/, method
                            .accounts(tslib_1.__assign({ associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, tokenProgram: spl_token_1.TOKEN_PROGRAM_ID, systemProgram: anchor.web3.SystemProgram.programId, rent: anchor.web3.SYSVAR_RENT_PUBKEY, authority: authority, organization: organization.pda, buddyProfile: buddyProfile.pda, buddy: buddy.pda, ownerTreasury: buddyTreasuryPDA, ownerTreasuryTokenAccount: buddyTreasuryATA, member: memberPDA, mint: (0, parse_1.parsePublicKey)(organization.mainTokenMint), globalReferrerTreasury: buddy.referrerTreasuryPda
                                ? (0, parse_1.parsePublicKey)(buddy.referrerTreasuryPda)
                                : referrerTreasuryPDA, referrerTreasury: referrerTreasuryPDA, referrerTreasuryTokenAccount: referrerTreasuryATA }, (payer ? { payer: payer } : {})))
                            .remainingAccounts(tslib_1.__spreadArray([
                            //name check
                            {
                                pubkey: web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("paid_"), Buffer.from(memberName)], program.programId)[0],
                                isWritable: false,
                                isSigner: false
                            }
                        ], (organization.enforceWalletUniqueness
                            ? [
                                {
                                    pubkey: memberNamePDA,
                                    isWritable: true,
                                    isSigner: false
                                },
                            ]
                            : []), true))
                            .instruction()];
                case 5: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
exports.initMember = initMember;
//# sourceMappingURL=initMember.js.map