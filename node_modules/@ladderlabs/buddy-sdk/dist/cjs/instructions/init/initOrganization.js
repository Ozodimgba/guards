"use strict";
exports.__esModule = true;
exports.initOrganization = void 0;
var tslib_1 = require("tslib");
var spl_token_1 = require("@solana/spl-token");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var pda_1 = require("../../utils/pda");
var accounts_1 = require("../../utils/accounts");
var type_1 = require("../../utils/type");
function initOrganization(program, authority, organizationName, options, ambassadorPDA, ambassadorBPS, usdcMint) {
    if (ambassadorPDA === void 0) { ambassadorPDA = null; }
    if (ambassadorBPS === void 0) { ambassadorBPS = null; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var organizationPDA, organizationNamePDA, userTokenAccount, _a, buddyPDA, ata, treasury, memberPDA, usdcATA, superAdmin;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    organizationPDA = (0, pda_1.getOrganizationPDA)(program, organizationName);
                    organizationNamePDA = (0, pda_1.getOrganizationNamePDA)(program, organizationName);
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(authority, usdcMint, false)];
                case 1:
                    userTokenAccount = _b.sent();
                    return [4 /*yield*/, (0, accounts_1.getBuddylinkBuddyAccounts)(program, organizationName, options.mainTokenMint)];
                case 2:
                    _a = _b.sent(), buddyPDA = _a.buddyPDA, ata = _a.ata, treasury = _a.treasury, memberPDA = _a.memberPDA;
                    usdcATA = null;
                    if (!(usdcMint.toString() === type_1.USDC_MINT.toString())) return [3 /*break*/, 3];
                    usdcATA = type_1.PROGRAM_USDC_ATA;
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, (0, accounts_1.getBuddylinkBuddyAccounts)(program, organizationName, usdcMint)];
                case 4:
                    usdcATA = (_b.sent()).ata;
                    _b.label = 5;
                case 5: return [4 /*yield*/, program.account.superAdmin.all()];
                case 6:
                    superAdmin = (_b.sent())[0];
                    return [4 /*yield*/, program.methods
                            .initOrganization(organizationName, options.mainTokenMint, options.enforceWalletUniqueness, options.allowMultiLevel, ambassadorBPS, options.allowMultiAttribution, new anchor.BN(options.volumeRequiredForRewards))
                            .accounts({
                            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            superAdmin: superAdmin.publicKey,
                            authority: authority,
                            organization: organizationPDA,
                            organizationName: organizationNamePDA,
                            mint: options.mainTokenMint,
                            buddylinkBuddy: buddyPDA,
                            buddylinkBuddyTreasury: treasury,
                            buddylinkBuddyTokenAccount: ata,
                            buddylinkBuddyMember: memberPDA,
                            buddylinkUsdcTokenAccount: usdcATA,
                            ambassador: ambassadorPDA,
                            usdcMint: usdcMint,
                            usdcTokenAccount: userTokenAccount
                        })
                            .instruction()];
                case 7: 
                // TODO: init main token treasury if doesn't exist on master org
                return [2 /*return*/, _b.sent()];
            }
        });
    });
}
exports.initOrganization = initOrganization;
//# sourceMappingURL=initOrganization.js.map