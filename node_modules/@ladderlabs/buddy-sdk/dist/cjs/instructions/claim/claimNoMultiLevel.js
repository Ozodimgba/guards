"use strict";
exports.__esModule = true;
exports.claimNoMultiLevel = void 0;
var tslib_1 = require("tslib");
var spl_token_1 = require("@solana/spl-token");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var pda_1 = require("../../utils/pda");
var parse_1 = require("../../utils/parse");
var type_1 = require("../../utils/type");
function claimNoMultiLevel(program, authority, buddyPDA, treasuryPDA) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var instructions, buddy, buddyProfilePDA, treasury, treasuryATA, userTokenAccount, masterOrganization, masterTreasuryPDA, masterTreasuryATA, _a, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 1:
                    buddy = _c.sent();
                    if (!buddy)
                        throw type_1.BUDDY_DOESNT_EXIST;
                    buddyProfilePDA = buddyPDA;
                    if (buddy.authority.toString() !== authority.toString()) {
                        buddyProfilePDA = buddy.authority;
                    }
                    return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
                case 2:
                    treasury = _c.sent();
                    if (!treasury)
                        throw type_1.TREASURY_DOESNT_EXIST;
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(treasuryPDA, treasury.mint)];
                case 3:
                    treasuryATA = _c.sent();
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(authority, treasury.mint)];
                case 4:
                    userTokenAccount = _c.sent();
                    return [4 /*yield*/, program.account.masterOrganization.all()];
                case 5:
                    masterOrganization = (_c.sent())[0];
                    masterTreasuryPDA = (0, pda_1.getMasterTreasuryPDA)(program, treasury.mint);
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(masterTreasuryPDA, treasury.mint)];
                case 6:
                    masterTreasuryATA = _c.sent();
                    _b = (_a = instructions).push;
                    return [4 /*yield*/, program.methods
                            .noMultiLevelClaim(null)
                            .accounts({
                            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrganization.publicKey,
                            masterOrganizationTreasury: masterTreasuryPDA,
                            masterOrganizationTokenAccount: masterTreasuryATA,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: treasuryPDA,
                            buddyTokenAccount: treasuryATA,
                            receiverAccount: authority,
                            mint: (0, parse_1.parsePublicKey)(treasury.mint),
                            organization: null,
                            userTokenAccount: userTokenAccount
                        })
                            .instruction()];
                case 7:
                    _b.apply(_a, [_c.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
exports.claimNoMultiLevel = claimNoMultiLevel;
//# sourceMappingURL=claimNoMultiLevel.js.map