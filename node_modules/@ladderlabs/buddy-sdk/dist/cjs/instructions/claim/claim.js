"use strict";
exports.__esModule = true;
exports.claim = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var pda_1 = require("../../utils/pda");
var initTreasury_1 = require("../init/initTreasury");
var parse_1 = require("../../utils/parse");
var type_1 = require("../../utils/type");
function claim(program, authority, buddyPDA, treasuryPDA) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var instructions, buddy, buddyProfilePDA, treasury, treasuryATA, userTokenAccount, masterOrganization, masterTreasuryPDA, masterTreasuryATA, referrerTreasuryPDA, referrerTreasuryATA, referrerTreasury, owners, shares, _i, _a, owner, newReferrerTreasuryPDA, newTreasury, _b, _c, _e_1, _d, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 1:
                    buddy = _g.sent();
                    if (!buddy)
                        throw type_1.BUDDY_DOESNT_EXIST;
                    buddyProfilePDA = buddyPDA;
                    if (buddy.authority.toString() !== authority.toString()) {
                        buddyProfilePDA = buddy.authority;
                    }
                    return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
                case 2:
                    treasury = _g.sent();
                    if (!treasury)
                        throw type_1.TREASURY_DOESNT_EXIST;
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(treasuryPDA, treasury.mint)];
                case 3:
                    treasuryATA = _g.sent();
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(authority, treasury.mint)];
                case 4:
                    userTokenAccount = _g.sent();
                    return [4 /*yield*/, program.account.masterOrganization.all()];
                case 5:
                    masterOrganization = (_g.sent())[0];
                    masterTreasuryPDA = (0, pda_1.getMasterTreasuryPDA)(program, treasury.mint);
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(masterTreasuryPDA, treasury.mint)];
                case 6:
                    masterTreasuryATA = _g.sent();
                    referrerTreasuryPDA = null, referrerTreasuryATA = null;
                    if (!(buddy.referrerTreasuryPda.toString() !== web3_js_1.PublicKey["default"].toString())) return [3 /*break*/, 12];
                    return [4 /*yield*/, program.account.treasury.fetchNullable(buddy.referrerTreasuryPda)];
                case 7:
                    referrerTreasury = _g.sent();
                    if (!referrerTreasury)
                        throw type_1.REFERRER_TREASURY_DOESNT_EXIST;
                    referrerTreasuryPDA = buddy.referrerTreasuryPda;
                    if (!(referrerTreasury.mint.toString() !== treasury.mint.toString())) return [3 /*break*/, 10];
                    owners = [], shares = [];
                    for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                        owner = _a[_i];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    newReferrerTreasuryPDA = (0, pda_1.getTreasuryPDA)(program, owners, shares, (0, parse_1.parsePublicKey)(treasury.mint));
                    referrerTreasuryPDA = newReferrerTreasuryPDA;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(newReferrerTreasuryPDA)];
                case 8:
                    newTreasury = _g.sent();
                    if (!!newTreasury) return [3 /*break*/, 10];
                    _c = (_b = instructions).push;
                    return [4 /*yield*/, (0, initTreasury_1.initTreasury)(program, authority, owners, shares, (0, parse_1.parsePublicKey)(treasury.mint))];
                case 9:
                    _c.apply(_b, [_g.sent()]);
                    _g.label = 10;
                case 10: return [4 /*yield*/, (0, pda_1.getTokenAccount)(referrerTreasuryPDA, treasury.mint)];
                case 11:
                    referrerTreasuryATA = _g.sent();
                    _g.label = 12;
                case 12:
                    if (!userTokenAccount) return [3 /*break*/, 16];
                    _g.label = 13;
                case 13:
                    _g.trys.push([13, 15, , 16]);
                    return [4 /*yield*/, program.provider.connection.getTokenAccountBalance(userTokenAccount)];
                case 14:
                    _g.sent();
                    return [3 /*break*/, 16];
                case 15:
                    _e_1 = _g.sent();
                    instructions.push((0, spl_token_1.createAssociatedTokenAccountInstruction)(authority, userTokenAccount, authority, treasury.mint));
                    return [3 /*break*/, 16];
                case 16:
                    _f = (_d = instructions).push;
                    return [4 /*yield*/, program.methods
                            .claim(null)
                            .accounts({
                            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrganization.publicKey,
                            masterOrganizationTreasury: masterTreasuryPDA,
                            masterOrganizationTokenAccount: masterTreasuryATA,
                            referrerTreasury: referrerTreasuryPDA,
                            referrerTokenAccount: referrerTreasuryATA,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: treasuryPDA,
                            buddyTokenAccount: treasuryATA,
                            receiverAccount: authority,
                            organization: null,
                            mint: (0, parse_1.parsePublicKey)(treasury.mint),
                            userTokenAccount: userTokenAccount
                        })
                            .instruction()];
                case 17:
                    _f.apply(_d, [_g.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
exports.claim = claim;
//# sourceMappingURL=claim.js.map