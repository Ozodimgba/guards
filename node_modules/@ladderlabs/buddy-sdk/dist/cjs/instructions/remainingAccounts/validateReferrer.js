"use strict";
exports.__esModule = true;
exports.validateReferrerAccounts = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var pda_1 = require("../../utils/pda");
var pda_2 = require("../../utils/pda");
var parse_1 = require("../../utils/parse");
var type_1 = require("../../utils/type");
function validateReferrerAccounts(program, mint, allowStats, memberPDA) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var member, ownerTreasuryPDA, ownerTreasury, buddyPDA, buddy, buddyProfilePDA, referrerTreasuryPDA, referrerTreasury, mintTreasuryPDA, owners, shares, _i, _a, owner, mintTreasuryATA, referrerMemberPDA, referrerMember;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!memberPDA || memberPDA.toString() === web3_js_1.PublicKey["default"].toString()) {
                        return [2 /*return*/, {
                                programId: program.programId,
                                buddyProfile: web3_js_1.PublicKey["default"],
                                buddy: web3_js_1.PublicKey["default"],
                                buddyTreasury: web3_js_1.PublicKey["default"],
                                memberPDA: web3_js_1.PublicKey["default"],
                                referrerMember: web3_js_1.PublicKey["default"],
                                referrerTreasury: web3_js_1.PublicKey["default"],
                                referrerTreasuryReward: web3_js_1.PublicKey["default"],
                                mint: program.programId,
                                referrerATA: program.programId
                            }];
                    }
                    return [4 /*yield*/, program.account.member.fetchNullable(memberPDA)];
                case 1:
                    member = _b.sent();
                    if (!member || member.referrer.toString() === web3_js_1.PublicKey["default"].toString()) {
                        return [2 /*return*/, {
                                programId: program.programId,
                                buddyProfile: web3_js_1.PublicKey["default"],
                                buddy: web3_js_1.PublicKey["default"],
                                buddyTreasury: web3_js_1.PublicKey["default"],
                                memberPDA: web3_js_1.PublicKey["default"],
                                referrerMember: web3_js_1.PublicKey["default"],
                                referrerTreasury: web3_js_1.PublicKey["default"],
                                referrerTreasuryReward: web3_js_1.PublicKey["default"],
                                mint: program.programId,
                                referrerATA: program.programId
                            }];
                    }
                    ownerTreasuryPDA = member.owner;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(ownerTreasuryPDA)];
                case 2:
                    ownerTreasury = _b.sent();
                    if (!ownerTreasury)
                        throw type_1.TREASURY_DOESNT_EXIST;
                    buddyPDA = ownerTreasury.owners[0].ownerPda;
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 3:
                    buddy = _b.sent();
                    if (!buddy)
                        throw type_1.OWNER_BUDDY_DOESNT_EXIST;
                    buddyProfilePDA = buddyPDA;
                    if (!buddy.buddyType.profile) {
                        buddyProfilePDA = buddy.authority;
                    }
                    referrerTreasuryPDA = member.referrer;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryPDA)];
                case 4:
                    referrerTreasury = _b.sent();
                    if (!referrerTreasury)
                        throw type_1.REFERRER_TREASURY_DOESNT_EXIST;
                    mintTreasuryPDA = referrerTreasuryPDA;
                    if (referrerTreasury.mint.toString() !== mint.toString()) {
                        owners = [], shares = [];
                        for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                            owner = _a[_i];
                            owners.push(owner.ownerPda);
                            shares.push(owner.share);
                        }
                        mintTreasuryPDA = (0, pda_2.getTreasuryPDA)(program, owners, shares, (0, parse_1.parsePublicKey)(mint));
                    }
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(mintTreasuryPDA, mint)];
                case 5:
                    mintTreasuryATA = _b.sent();
                    referrerMemberPDA = null;
                    if (!allowStats) return [3 /*break*/, 7];
                    return [4 /*yield*/, program.account.member.all([
                            {
                                memcmp: {
                                    offset: 41,
                                    bytes: referrerTreasuryPDA.toBase58()
                                }
                            },
                        ])];
                case 6:
                    referrerMember = (_b.sent())[0];
                    referrerMemberPDA = (referrerMember === null || referrerMember === void 0 ? void 0 : referrerMember.publicKey) || null;
                    _b.label = 7;
                case 7: return [2 /*return*/, {
                        programId: program.programId,
                        buddyProfile: buddyProfilePDA,
                        buddy: buddyPDA,
                        buddyTreasury: ownerTreasuryPDA,
                        memberPDA: memberPDA,
                        referrerMember: referrerMemberPDA,
                        referrerTreasury: referrerTreasuryPDA,
                        referrerTreasuryReward: mintTreasuryPDA,
                        mint: mint.toString() === web3_js_1.PublicKey["default"].toString()
                            ? program.programId
                            : mint,
                        referrerATA: mintTreasuryATA || program.programId
                    }];
            }
        });
    });
}
exports.validateReferrerAccounts = validateReferrerAccounts;
//# sourceMappingURL=validateReferrer.js.map