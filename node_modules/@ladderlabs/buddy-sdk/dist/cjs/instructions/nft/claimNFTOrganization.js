"use strict";
exports.__esModule = true;
exports.claimNFTOrganization = void 0;
var tslib_1 = require("tslib");
var spl_token_1 = require("@solana/spl-token");
var web3_js_1 = require("@solana/web3.js");
var anchor_1 = require("@project-serum/anchor");
var pda_1 = require("../../utils/pda");
var accounts_1 = require("../../utils/accounts");
var parse_1 = require("../../utils/parse");
function claimNFTOrganization(program, authority, organizationPDA, organizationName, options, nftMint) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, buddyPDA, ata, treasury, memberPDA;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, accounts_1.getBuddylinkBuddyAccounts)(program, organizationName, options.mainTokenMint)];
                case 1:
                    _a = _b.sent(), buddyPDA = _a.buddyPDA, ata = _a.ata, treasury = _a.treasury, memberPDA = _a.memberPDA;
                    return [4 /*yield*/, program.methods
                            .claimOrganization(options.mainTokenMint, options.enforceWalletUniqueness, options.allowMultiLevel, null, options.allowMultiAttribution, new anchor_1.BN(options.volumeRequiredForRewards))
                            .accounts({
                            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                            systemProgram: web3_js_1.SystemProgram.programId,
                            rent: web3_js_1.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            blNftSigner: (0, pda_1.getBlSignerPDA)(program),
                            organization: organizationPDA,
                            mint: (0, parse_1.parsePublicKey)(options.mainTokenMint),
                            buddylinkBuddy: buddyPDA,
                            buddylinkBuddyTreasury: treasury,
                            buddylinkBuddyTokenAccount: ata,
                            buddylinkBuddyMember: memberPDA,
                            metaplexMetadataAccount: (0, pda_1.findMetadataAddress)(nftMint),
                            ambassador: null,
                            nftMint: nftMint,
                            nftToken: (0, spl_token_1.getAssociatedTokenAddressSync)(nftMint, authority),
                            nftMetadata: (0, pda_1.findBLDataMetadataAddress)(nftMint, program.programId)
                        })
                            .instruction()];
                case 2: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
exports.claimNFTOrganization = claimNFTOrganization;
//# sourceMappingURL=claimNFTOrganization.js.map