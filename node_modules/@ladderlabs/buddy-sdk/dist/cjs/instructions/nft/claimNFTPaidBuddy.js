"use strict";
exports.__esModule = true;
exports.claimNFTPaidBuddy = void 0;
var tslib_1 = require("tslib");
var spl_token_1 = require("@solana/spl-token");
var web3_js_1 = require("@solana/web3.js");
var pda_1 = require("../../utils/pda");
// Similar to redeemPaidBuddy but also inits the buddy itself
function claimNFTPaidBuddy(program, authority, buddyProfilePDA, paidBuddyPDA, nftMint) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, program.methods
                        .claimPaidBuddy()
                        .accounts({
                        tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                        systemProgram: web3_js_1.SystemProgram.programId,
                        rent: web3_js_1.SYSVAR_RENT_PUBKEY,
                        authority: authority,
                        blNftSigner: (0, pda_1.getBlSignerPDA)(program),
                        buddyProfile: buddyProfilePDA,
                        buddy: paidBuddyPDA,
                        metaplexMetadataAccount: (0, pda_1.findMetadataAddress)(nftMint),
                        nftMint: nftMint,
                        nftToken: (0, spl_token_1.getAssociatedTokenAddressSync)(nftMint, authority),
                        nftMetadata: (0, pda_1.findBLDataMetadataAddress)(nftMint, program.programId)
                    })
                        .instruction()];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.claimNFTPaidBuddy = claimNFTPaidBuddy;
//# sourceMappingURL=claimNFTPaidBuddy.js.map