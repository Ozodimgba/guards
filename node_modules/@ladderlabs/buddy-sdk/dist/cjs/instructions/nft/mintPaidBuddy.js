"use strict";
exports.__esModule = true;
exports.mintPaidBuddy = void 0;
var tslib_1 = require("tslib");
var spl_token_1 = require("@solana/spl-token");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var pda_1 = require("../../utils/pda");
var type_1 = require("../../utils/type");
function mintPaidBuddy(program, authority, buddyProfilePDA, paidBuddyPDA, generatedMintAddress, collectionMint) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = [(0, pda_1.increaseComputeLimit)(250000)];
                    return [4 /*yield*/, program.methods
                            .mintPaidBuddy()
                            .accounts({
                            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            buddyProfile: buddyProfilePDA,
                            buddy: paidBuddyPDA,
                            blNftSigner: (0, pda_1.getBlSignerPDA)(program),
                            metaplexTokenMetadataProgram: type_1.METADATA_PROGRAM_ID,
                            metaplexMetadataAccount: (0, pda_1.findMetadataAddress)(generatedMintAddress),
                            nftMint: generatedMintAddress,
                            nftToken: (0, spl_token_1.getAssociatedTokenAddressSync)(generatedMintAddress, authority),
                            nftMetadata: (0, pda_1.findBLDataMetadataAddress)(generatedMintAddress, program.programId),
                            collectionMint: collectionMint || type_1.COLLECTION_MINT,
                            collectionMetadata: (0, pda_1.findMetadataAddress)(collectionMint || type_1.COLLECTION_MINT),
                            collectionMasterEdition: (0, pda_1.findMasterEdition)(collectionMint || type_1.COLLECTION_MINT)
                        })
                            .instruction()];
                case 1: return [2 /*return*/, _a.concat([
                        _b.sent()
                    ])];
            }
        });
    });
}
exports.mintPaidBuddy = mintPaidBuddy;
//# sourceMappingURL=mintPaidBuddy.js.map