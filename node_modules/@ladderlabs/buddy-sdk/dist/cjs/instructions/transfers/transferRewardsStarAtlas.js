"use strict";
exports.__esModule = true;
exports.transferRewardsStarAtlas = void 0;
var tslib_1 = require("tslib");
var anchor_1 = require("@project-serum/anchor");
var web3_js_1 = require("@solana/web3.js");
var pda_1 = require("../../utils/pda");
var pda_2 = require("../../utils/pda");
var parse_1 = require("../../utils/parse");
var type_1 = require("../../utils/type");
var spl_token_1 = require("@solana/spl-token");
var SA_PROGRAM_SIGNER = new web3_js_1.PublicKey("a8fUyBUJ7PJ4ac3AJSFA5eEsVAKUszAvHSYmvtqSn5U");
function transferRewardsStarAtlas(program, authority, mint, allowStats, amount, volume, programSigner, memberPDA) {
    var _a;
    if (programSigner === void 0) { programSigner = SA_PROGRAM_SIGNER; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var member, referrerTreasuryPDA, referrerTreasury, mintTreasuryPDA, owners, shares, _i, _b, owner, mintTreasuryATA, referrerMemberPDA, referrerMember, treasury, buddyPDA, buddyProfilePDA, buddy, referrerMemberStats, refereeTokenAccount;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!memberPDA || memberPDA.toString() === web3_js_1.PublicKey["default"].toString()) {
                        return [2 /*return*/, []];
                    }
                    return [4 /*yield*/, program.account.member.fetchNullable(memberPDA)];
                case 1:
                    member = _c.sent();
                    if (!member || member.referrer.toString() === web3_js_1.PublicKey["default"].toString()) {
                        return [2 /*return*/, []];
                    }
                    referrerTreasuryPDA = member.referrer;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(referrerTreasuryPDA)];
                case 2:
                    referrerTreasury = _c.sent();
                    if (!referrerTreasury)
                        throw type_1.REFERRER_TREASURY_DOESNT_EXIST;
                    mintTreasuryPDA = referrerTreasuryPDA;
                    if (referrerTreasury.mint.toString() !== mint.toString()) {
                        owners = [], shares = [];
                        for (_i = 0, _b = referrerTreasury.owners; _i < _b.length; _i++) {
                            owner = _b[_i];
                            owners.push(owner.ownerPda);
                            shares.push(owner.share);
                        }
                        mintTreasuryPDA = (0, pda_2.getTreasuryPDA)(program, owners, shares, (0, parse_1.parsePublicKey)(mint));
                    }
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(mintTreasuryPDA, mint)];
                case 3:
                    mintTreasuryATA = _c.sent();
                    referrerMemberPDA = web3_js_1.PublicKey["default"];
                    if (!allowStats) return [3 /*break*/, 5];
                    return [4 /*yield*/, program.account.member.all([
                            {
                                memcmp: {
                                    offset: 41,
                                    bytes: referrerTreasuryPDA.toBase58()
                                }
                            },
                        ])];
                case 4:
                    referrerMember = (_c.sent())[0];
                    referrerMemberPDA = (referrerMember === null || referrerMember === void 0 ? void 0 : referrerMember.publicKey) || web3_js_1.PublicKey["default"];
                    _c.label = 5;
                case 5: return [4 /*yield*/, program.account.treasury.fetch(member.owner)];
                case 6:
                    treasury = _c.sent();
                    buddyPDA = treasury.owners[0].ownerPda;
                    buddyProfilePDA = buddyPDA;
                    return [4 /*yield*/, program.account.buddy.fetch(buddyPDA)];
                case 7:
                    buddy = _c.sent();
                    if (!buddy)
                        throw type_1.BUDDY_DOESNT_EXIST;
                    if (!((_a = buddy.buddyType) === null || _a === void 0 ? void 0 : _a.profile)) {
                        buddyProfilePDA = buddy.authority;
                    }
                    referrerMemberStats = web3_js_1.PublicKey["default"];
                    if (referrerMemberPDA.toString() !== web3_js_1.PublicKey["default"].toString()) {
                        referrerMemberStats = (0, pda_1.getMemberStatisticPDA)(program, member.organization, referrerMemberPDA);
                    }
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(authority, mint)];
                case 8:
                    refereeTokenAccount = _c.sent();
                    return [4 /*yield*/, program.methods
                            .transferRewardStarAtlas(new anchor_1.BN(amount), new anchor_1.BN(volume))
                            .accounts({
                            systemProgram: web3_js_1.SystemProgram.programId,
                            authority: authority,
                            programSigner: programSigner,
                            funder: authority,
                            mint: mint,
                            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
                            referrerMember: referrerMemberPDA,
                            referrerMemberStatistics: referrerMemberStats,
                            referrerTreasury: referrerTreasuryPDA,
                            referrerTreasuryForReward: mintTreasuryPDA,
                            buddyProfile: buddyProfilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: member.owner,
                            member: memberPDA,
                            refereeTokenAccount: refereeTokenAccount,
                            referrerTokenAccount: mintTreasuryATA
                        }).instruction()];
                case 9: return [2 /*return*/, [
                        _c.sent()
                    ]];
            }
        });
    });
}
exports.transferRewardsStarAtlas = transferRewardsStarAtlas;
//# sourceMappingURL=transferRewardsStarAtlas.js.map