"use strict";
exports.__esModule = true;
exports.transferRewardsGlobalBuddies = void 0;
var tslib_1 = require("tslib");
var web3_js_1 = require("@solana/web3.js");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var parse_1 = require("../../utils/parse");
var spl_token_1 = require("@solana/spl-token");
var pda_1 = require("../../utils/pda");
var type_1 = require("../../utils/type");
function transferRewardsGlobalBuddies(program, authority, buddyPDA, amount, mint) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var instructions, buddy, profileBuddyPDA, referrerTreasuryPDA, finalReferrerTreasuryPDA, referrerTreasury, owners, shares, _i, _a, owner, refereeTokenAccount, referrerTokenAccount, _b, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 1:
                    buddy = _d.sent();
                    if (!buddy)
                        throw type_1.BUDDY_DOESNT_EXIST;
                    profileBuddyPDA = buddyPDA;
                    if (!buddy.buddyType.profile) {
                        profileBuddyPDA = buddy.authority;
                    }
                    referrerTreasuryPDA = buddy.referrerTreasuryPda;
                    if (referrerTreasuryPDA.toString() === web3_js_1.PublicKey["default"].toString())
                        throw type_1.BUDDY_NO_REFERRER;
                    finalReferrerTreasuryPDA = referrerTreasuryPDA;
                    return [4 /*yield*/, program.account.treasury.fetchNullable(finalReferrerTreasuryPDA)];
                case 2:
                    referrerTreasury = _d.sent();
                    if (!referrerTreasury)
                        throw type_1.REFERRER_TREASURY_DOESNT_EXIST;
                    if (referrerTreasury.mint.toString() !== mint.toString()) {
                        owners = [], shares = [];
                        for (_i = 0, _a = referrerTreasury.owners; _i < _a.length; _i++) {
                            owner = _a[_i];
                            owners.push(owner.ownerPda);
                            shares.push(owner.share);
                        }
                        finalReferrerTreasuryPDA = (0, pda_1.getTreasuryPDA)(program, owners, shares, mint);
                    }
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(authority, mint, false)];
                case 3:
                    refereeTokenAccount = _d.sent();
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(referrerTreasuryPDA, mint)];
                case 4:
                    referrerTokenAccount = _d.sent();
                    _c = (_b = instructions).push;
                    return [4 /*yield*/, program.methods
                            .transferRewardGlobal(new anchor.BN(amount))
                            .accounts(tslib_1.__assign(tslib_1.__assign({}, ((0, parse_1.parsePublicKey)(mint)
                            ? { tokenProgram: spl_token_1.TOKEN_PROGRAM_ID }
                            : { systemProgram: anchor.web3.SystemProgram.programId })), { authority: authority, globalReferrerTreasury: referrerTreasuryPDA, globalReferrerTreasuryForReward: finalReferrerTreasuryPDA, buddyProfile: profileBuddyPDA, buddy: buddyPDA, mint: (0, parse_1.parsePublicKey)(mint), globalReferrerTokenAccount: referrerTokenAccount, refereeTokenAccount: refereeTokenAccount }))
                            .instruction()];
                case 5:
                    _c.apply(_b, [_d.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
exports.transferRewardsGlobalBuddies = transferRewardsGlobalBuddies;
//# sourceMappingURL=transferRewardsGlobalBuddies.js.map