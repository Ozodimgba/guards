"use strict";
exports.__esModule = true;
exports.Member = void 0;
var tslib_1 = require("tslib");
var type_1 = require("../utils/type");
var Treasury_1 = require("./Treasury");
var pda_1 = require("../utils/pda");
var claimStarAtlas_1 = require("../instructions/claim/claimStarAtlas");
var Member = /** @class */ (function () {
    function Member(member, program, wallet) {
        this.account = member;
        this.wallet = wallet;
        this.program = program;
    }
    Member.prototype.refresh = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var member;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.member.fetch(this.account.pda)];
                    case 1:
                        member = _a.sent();
                        this.account = tslib_1.__assign({ pda: this.account.pda }, member);
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Member.prototype.getStatistics = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var statsPDA, stats;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        statsPDA = (0, pda_1.getMemberStatisticPDA)(this.program, this.account.organization, this.account.pda);
                        return [4 /*yield*/, this.program.account.memberStatistics.fetchNullable(statsPDA)];
                    case 1:
                        stats = _a.sent();
                        return [2 /*return*/, stats ? tslib_1.__assign({ pda: statsPDA }, stats) : null];
                }
            });
        });
    };
    Member.prototype.getReferrer = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var treasury;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.treasury.fetchNullable(this.account.referrer)];
                    case 1:
                        treasury = _a.sent();
                        if (treasury)
                            return [2 /*return*/, new Treasury_1.Treasury(tslib_1.__assign(tslib_1.__assign({}, treasury), { pda: this.account.referrer }), this.program, this.wallet)];
                        return [2 /*return*/, null];
                }
            });
        });
    };
    Member.prototype.getOwner = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var treasury;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.treasury.fetchNullable(this.account.owner)];
                    case 1:
                        treasury = _a.sent();
                        if (!treasury)
                            throw !type_1.OWNER_BUDDY_DOESNT_EXIST;
                        return [2 /*return*/, new Treasury_1.Treasury(tslib_1.__assign(tslib_1.__assign({}, treasury), { pda: this.account.owner }), this.program, this.wallet)];
                }
            });
        });
    };
    Member.prototype.getTotalReferred = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var members;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.member.all([
                            {
                                memcmp: {
                                    offset: 9,
                                    bytes: this.account.owner.toBase58()
                                }
                            },
                        ])];
                    case 1:
                        members = _a.sent();
                        return [2 /*return*/, members.length];
                }
            });
        });
    };
    Member.prototype.claimStarAtlas = function (amount, mint) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet)
                            throw type_1.NO_WALLET_ERROR;
                        return [4 /*yield*/, (0, claimStarAtlas_1.claimStarAtlasInstruction)(this.program, this.wallet, this.account, amount, mint)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Member;
}());
exports.Member = Member;
//# sourceMappingURL=Member.js.map