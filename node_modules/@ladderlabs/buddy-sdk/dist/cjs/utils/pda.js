"use strict";
exports.__esModule = true;
exports.findBLDataMetadataAddress = exports.findMetadataAddress = exports.findMasterEdition = exports.getMemberStatisticPDA = exports.getBlSignerPDA = exports.getMasterTreasuryPDA = exports.getAmbassadorPDA = exports.getTokenAccount = exports.getTreasuryPDA = exports.getTreasuryPDAByHash = exports.getHashTreasury = exports.getMemberNamePDA = exports.getMemberPDA = exports.getBuddyNamePDA = exports.getBuddyNameProfilePDA = exports.getBuddyPDA = exports.getOrganizationNamePDA = exports.getOrganizationPDA = exports.increaseComputeLimit = void 0;
var tslib_1 = require("tslib");
var anchor = tslib_1.__importStar(require("@project-serum/anchor"));
var type_1 = require("./type");
var web3_js_1 = require("@solana/web3.js");
var crypto_1 = require("crypto");
var spl_token_1 = require("@solana/spl-token");
var parse_1 = require("./parse");
function increaseComputeLimit(newLimit) {
    if (newLimit === void 0) { newLimit = 500000; }
    return web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({
        units: newLimit
    });
}
exports.increaseComputeLimit = increaseComputeLimit;
// Organization
function getOrganizationPDA(program, name) {
    var organizationPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(type_1.ORGANIZATION_NAME), Buffer.from(name)], program.programId)[0];
    return organizationPDA;
}
exports.getOrganizationPDA = getOrganizationPDA;
function getOrganizationNamePDA(program, name) {
    var organizationNamePDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(type_1.ORGANIZATION_NAME_CHECK), Buffer.from(name)], program.programId)[0];
    return organizationNamePDA;
}
exports.getOrganizationNamePDA = getOrganizationNamePDA;
// Buddy
function getBuddyPDA(program, name) {
    var buddyPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(type_1.BUDDY_NAME), Buffer.from(name)], program.programId)[0];
    return buddyPDA;
}
exports.getBuddyPDA = getBuddyPDA;
function getBuddyNameProfilePDA(program, wallet) {
    var buddyNamePDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(type_1.BUDDY_NAME_CHECK), wallet.toBuffer()], program.programId)[0];
    return buddyNamePDA;
}
exports.getBuddyNameProfilePDA = getBuddyNameProfilePDA;
function getBuddyNamePDA(program, name) {
    var buddyNamePDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(type_1.PAID_BUDDY_CHECK), Buffer.from(name)], program.programId)[0];
    return buddyNamePDA;
}
exports.getBuddyNamePDA = getBuddyNamePDA;
// Member
function getMemberPDA(program, organization, name) {
    var memberPDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(type_1.MEMBER_NAME),
        Buffer.from(organization),
        Buffer.from("_"),
        Buffer.from(name),
    ], program.programId)[0];
    return memberPDA;
}
exports.getMemberPDA = getMemberPDA;
function getMemberNamePDA(program, organizationName, wallet) {
    var buddyNamePDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(type_1.MEMBER_NAME_CHECK),
        Buffer.from(organizationName),
        Buffer.from("_"),
        wallet.toBuffer(),
    ], program.programId)[0];
    return buddyNamePDA;
}
exports.getMemberNamePDA = getMemberNamePDA;
// Treasury
function getHashTreasury(owners, shares) {
    var stringToHash = "";
    for (var i = 0; i < owners.length; i++) {
        stringToHash += owners[i].toString() + Math.floor(shares[i]);
    }
    var hashInBytes = (0, crypto_1.createHash)("sha256")
        .update("".concat(stringToHash).concat(type_1.FORCED_REFERRER_BPS.toString()))
        .digest();
    return hashInBytes;
}
exports.getHashTreasury = getHashTreasury;
function getTreasuryPDAByHash(program, hash, mint) {
    var treasuryPDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(type_1.TREASURY_NAME),
        (0, parse_1.parsePublicKey)(mint) ? mint.toBuffer() : Buffer.from(type_1.MINT_SOLANA_NAME),
        Buffer.from(hash),
    ], program.programId)[0];
    return treasuryPDA;
}
exports.getTreasuryPDAByHash = getTreasuryPDAByHash;
function getTreasuryPDA(program, owners, shares, mint) {
    var hash = getHashTreasury(owners, shares);
    return getTreasuryPDAByHash(program, hash, (0, parse_1.parsePublicKey)(mint));
}
exports.getTreasuryPDA = getTreasuryPDA;
function getTokenAccount(account, mint, isOffCurve) {
    if (isOffCurve === void 0) { isOffCurve = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(0, parse_1.parsePublicKey)(mint))
                        return [2 /*return*/, null];
                    return [4 /*yield*/, (0, spl_token_1.getAssociatedTokenAddress)(mint, account, isOffCurve)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getTokenAccount = getTokenAccount;
// Ambassador
function getAmbassadorPDA(program, name) {
    var ambassadorPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from(type_1.AMBASSADOR_NAME), Buffer.from(name)], program.programId)[0];
    return ambassadorPDA;
}
exports.getAmbassadorPDA = getAmbassadorPDA;
// Master Organization
function getMasterTreasuryPDA(program, mint) {
    var masterTreasuryPDA = anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from(type_1.TREASURY_NAME),
        Buffer.from(type_1.MASTER_NAME),
        (0, parse_1.parsePublicKey)(mint) ? mint.toBuffer() : Buffer.from(type_1.MINT_SOLANA_NAME),
    ], program.programId)[0];
    return masterTreasuryPDA;
}
exports.getMasterTreasuryPDA = getMasterTreasuryPDA;
function getBlSignerPDA(program) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("bl_nft_signer_")], program.programId)[0];
}
exports.getBlSignerPDA = getBlSignerPDA;
function getMemberStatisticPDA(program, organizationName, memberPDA) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("member_stats_"), Buffer.from(organizationName), Buffer.from("_"), memberPDA.toBuffer()], program.programId)[0];
}
exports.getMemberStatisticPDA = getMemberStatisticPDA;
function findMasterEdition(mint) {
    return anchor.web3.PublicKey.findProgramAddressSync([
        Buffer.from("metadata"),
        type_1.METADATA_PROGRAM_ID.toBuffer(),
        mint.toBuffer(),
        Buffer.from("edition"),
    ], type_1.METADATA_PROGRAM_ID)[0];
}
exports.findMasterEdition = findMasterEdition;
function findMetadataAddress(mint) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("metadata"), type_1.METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], type_1.METADATA_PROGRAM_ID)[0];
}
exports.findMetadataAddress = findMetadataAddress;
function findBLDataMetadataAddress(mint, programId) {
    return anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("metadata_"), mint.toBuffer()], programId)[0];
}
exports.findBLDataMetadataAddress = findBLDataMetadataAddress;
//# sourceMappingURL=pda.js.map