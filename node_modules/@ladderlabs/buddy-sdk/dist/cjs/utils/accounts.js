"use strict";
exports.__esModule = true;
exports.getBuddylinkBuddyAccounts = exports.getOrganizationAccounts = void 0;
var tslib_1 = require("tslib");
var pda_1 = require("./pda");
var web3_js_1 = require("@solana/web3.js");
var crypto_1 = require("crypto");
var type_1 = require("./type");
var parse_1 = require("./parse");
function getOrganizationAccounts(program, name) {
    var organizationPDA = (0, pda_1.getOrganizationPDA)(program, name);
    var organizationNamePDA = (0, pda_1.getOrganizationNamePDA)(program, name);
    return {
        organizationPDA: organizationPDA,
        organizationNamePDA: organizationNamePDA
    };
}
exports.getOrganizationAccounts = getOrganizationAccounts;
function getBuddylinkBuddyAccounts(program, organization, mint) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var blPDA, memberPDA, hashedBuddyInBytes, blTreasury, blTokenAccount;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    blPDA = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(type_1.BUDDY_NAME), Buffer.from(type_1.BUDDY_LINK_BUDDY_NAME)], program.programId)[0];
                    memberPDA = web3_js_1.PublicKey.findProgramAddressSync([
                        Buffer.from(type_1.MEMBER_NAME),
                        Buffer.from(organization),
                        Buffer.from("_"),
                        Buffer.from(type_1.BUDDY_LINK_BUDDY_NAME),
                    ], program.programId)[0];
                    hashedBuddyInBytes = (0, crypto_1.createHash)("sha256")
                        .update("".concat(blPDA, "10000").concat(type_1.FORCED_REFERRER_BPS.toString()))
                        .digest();
                    blTreasury = (0, pda_1.getTreasuryPDAByHash)(program, hashedBuddyInBytes, (0, parse_1.parsePublicKey)(mint));
                    return [4 /*yield*/, (0, pda_1.getTokenAccount)(blTreasury, mint)];
                case 1:
                    blTokenAccount = _a.sent();
                    return [2 /*return*/, {
                            buddyPDA: blPDA,
                            treasury: blTreasury,
                            ata: blTokenAccount,
                            memberPDA: memberPDA
                        }];
            }
        });
    });
}
exports.getBuddylinkBuddyAccounts = getBuddylinkBuddyAccounts;
//# sourceMappingURL=accounts.js.map