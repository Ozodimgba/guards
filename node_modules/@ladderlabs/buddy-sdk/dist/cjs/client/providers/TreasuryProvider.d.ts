/// <reference types="bn.js" />
/// <reference types="node" />
import { Program } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { Buddylink } from "../../idl/buddylink";
import { Treasury } from "../../models/Treasury";
import { Buddy } from "../../models/Buddy";
export declare class TreasuryProvider {
    private program;
    private wallet?;
    constructor(program: Program<Buddylink>, wallet?: PublicKey);
    getByMemberOwner(organizationName: string, memberName: string): Promise<{
        bump: number;
        authority: PublicKey;
        shareKeptInBps: number;
        ambassadorShareKeptInBps: number;
        buddyType: {
            profile?: Record<string, never> | undefined;
            paid?: Record<string, never> | undefined;
            saga?: Record<string, never> | undefined;
        };
        dateCreated: import("bn.js");
        isFrozen: boolean;
        referrerTreasuryPda: PublicKey;
        referrerType: {
            buddylink?: Record<string, never> | undefined;
            organization?: Record<string, never> | undefined;
        };
        name: string;
        padding: Buffer;
        version: {
            initial?: Record<string, never> | undefined;
            test?: Record<string, never> | undefined;
        };
        mainTokenMint: PublicKey;
        enforceWalletUniqueness: boolean;
        allowMultiLevel: boolean;
        ambassador: PublicKey;
        allowMultiAttribution: boolean;
        volumeRequiredForRewards: import("bn.js");
        mint: PublicKey;
        totalClaimed: import("bn.js");
        referrer: PublicKey;
        owner: PublicKey;
        globalReferrerOfBuddy: {
            referrerTreasuryOwnerHash: number[];
            referrerReferrerType: {
                buddylink?: Record<string, never> | undefined;
                organization?: Record<string, never> | undefined;
            };
        };
        paddingName: Buffer;
        organization: string;
        paddingOrganization: Buffer;
        created: import("bn.js");
        rewardsReceived: unknown;
        numberRewardsTracked: number;
        member: PublicKey;
        totalReferrerVolume: import("bn.js");
        numberOfClaimedRewards: import("bn.js");
        numberOfClaimedRewardsInVolume: import("bn.js");
        lastClaimed: import("bn.js");
        amountNoMultiLevel: import("bn.js");
        totalBps: number;
        owners: {
            ownerPda: PublicKey;
            share: number;
            withMultiLevel: {
                claimed: import("bn.js");
                frozen: import("bn.js");
            };
            noMultiLevel: {
                claimed: import("bn.js");
                frozen: import("bn.js");
            };
        }[];
        ownersHash: number[];
        paidBuddyPda: PublicKey;
    }>;
    getByMemberReferrer(organizationName: string, memberName: string): Promise<{
        bump: number;
        authority: PublicKey;
        shareKeptInBps: number;
        ambassadorShareKeptInBps: number;
        buddyType: {
            profile?: Record<string, never> | undefined;
            paid?: Record<string, never> | undefined;
            saga?: Record<string, never> | undefined;
        };
        dateCreated: import("bn.js");
        isFrozen: boolean;
        referrerTreasuryPda: PublicKey;
        referrerType: {
            buddylink?: Record<string, never> | undefined;
            organization?: Record<string, never> | undefined;
        };
        name: string;
        padding: Buffer;
        version: {
            initial?: Record<string, never> | undefined;
            test?: Record<string, never> | undefined;
        };
        mainTokenMint: PublicKey;
        enforceWalletUniqueness: boolean;
        allowMultiLevel: boolean;
        ambassador: PublicKey;
        allowMultiAttribution: boolean;
        volumeRequiredForRewards: import("bn.js");
        mint: PublicKey;
        totalClaimed: import("bn.js");
        referrer: PublicKey;
        owner: PublicKey;
        globalReferrerOfBuddy: {
            referrerTreasuryOwnerHash: number[];
            referrerReferrerType: {
                buddylink?: Record<string, never> | undefined;
                organization?: Record<string, never> | undefined;
            };
        };
        paddingName: Buffer;
        organization: string;
        paddingOrganization: Buffer;
        created: import("bn.js");
        rewardsReceived: unknown;
        numberRewardsTracked: number;
        member: PublicKey;
        totalReferrerVolume: import("bn.js");
        numberOfClaimedRewards: import("bn.js");
        numberOfClaimedRewardsInVolume: import("bn.js");
        lastClaimed: import("bn.js");
        amountNoMultiLevel: import("bn.js");
        totalBps: number;
        owners: {
            ownerPda: PublicKey;
            share: number;
            withMultiLevel: {
                claimed: import("bn.js");
                frozen: import("bn.js");
            };
            noMultiLevel: {
                claimed: import("bn.js");
                frozen: import("bn.js");
            };
        }[];
        ownersHash: number[];
        paidBuddyPda: PublicKey;
    }>;
    getByPDA(treasuryPDA: PublicKey): Promise<Treasury | null>;
    getByBuddyName(buddyName: string, mint?: PublicKey): Promise<Treasury | null>;
    getByOwner(buddyOwner: PublicKey, mint?: PublicKey): Promise<Treasury | null>;
    getByOwners(buddyOwners: PublicKey[], shares: number[], mint?: PublicKey): Promise<Treasury | null>;
    getByOwnerNames(buddyOwnerNames: string[], shares: number[], mint?: PublicKey): Promise<Treasury | null>;
    getByBuddy(buddy: Buddy, mint?: PublicKey): Promise<Treasury | null>;
    getAllByBuddy(buddyPDA: PublicKey): Promise<Treasury[]>;
    getAllSimpleByBuddy(buddyPDA: PublicKey): Promise<Treasury[]>;
}
